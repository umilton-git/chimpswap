{"ast":null,"code":"import { JSBI, TokenAmount } from '@uniswap/sdk';\nimport { STAKING_GENESIS } from '../state/stake/hooks';\nconst STAKING_END = STAKING_GENESIS + 60 * 60 * 24 * 60;\nconst TREASURY_VESTING_GENESIS = 1600387200; // 30 days\n\nconst TREASURY_VESTING_CLIFF = 60 * 60 * 24 * 30;\nconst ONE_YEAR = 60 * 60 * 24 * 365;\nconst TREASURY_BEGIN_YEAR_1 = TREASURY_VESTING_GENESIS;\nconst TREASURY_CLIFF_YEAR_1 = TREASURY_BEGIN_YEAR_1 + TREASURY_VESTING_CLIFF;\nconst TREASURY_END_YEAR_1 = TREASURY_BEGIN_YEAR_1 + ONE_YEAR;\nconst TREASURY_BEGIN_YEAR_2 = TREASURY_END_YEAR_1;\nconst TREASURY_END_YEAR_2 = TREASURY_BEGIN_YEAR_2 + ONE_YEAR;\nconst TREASURY_BEGIN_YEAR_3 = TREASURY_END_YEAR_2;\nconst TREASURY_END_YEAR_3 = TREASURY_BEGIN_YEAR_3 + ONE_YEAR;\nconst TREASURY_BEGIN_YEAR_4 = TREASURY_END_YEAR_3;\nconst TREASURY_END_YEAR_4 = TREASURY_BEGIN_YEAR_4 + ONE_YEAR;\nconst USERS_AMOUNT = 150000000;\nconst STAKING_REWARDS_AMOUNT = 20000000;\nconst TREASURY_YEAR_1_AMOUNT = 172000000;\nconst TREASURY_YEAR_2_AMOUNT = 12900000;\nconst TREASURY_YEAR_3_AMOUNT = 8600000;\nconst TREASURY_YEAR_4_AMOUNT = 4300000;\nconst TEAM_YEAR_1_AMOUNT = 160000000;\nconst TEAM_YEAR_2_AMOUNT = 12000000;\nconst TEAM_YEAR_3_AMOUNT = 8000000;\nconst TEAM_YEAR_4_AMOUNT = 4000000;\n\nfunction withVesting(before, time, amount, start, end, cliff) {\n  if (time.gt(start)) {\n    if (time.gte(end)) {\n      return JSBI.add(before, JSBI.BigInt(amount));\n    } else {\n      if (typeof cliff === 'number' && time.gte(cliff) || typeof cliff === 'undefined') {\n        return JSBI.add(before, JSBI.divide(JSBI.multiply(JSBI.BigInt(amount), JSBI.BigInt(time.sub(start).toString())), JSBI.subtract(JSBI.BigInt(end), JSBI.BigInt(start))));\n      }\n    }\n  }\n\n  return before;\n}\n\nexport function computeUniCirculation(uni, blockTimestamp, unclaimedUni) {\n  let wholeAmount = JSBI.BigInt(USERS_AMOUNT); // staking rewards\n\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, STAKING_REWARDS_AMOUNT, STAKING_GENESIS, STAKING_END); // treasury vesting\n\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TREASURY_YEAR_1_AMOUNT, TREASURY_BEGIN_YEAR_1, TREASURY_END_YEAR_1, TREASURY_CLIFF_YEAR_1);\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TREASURY_YEAR_2_AMOUNT, TREASURY_BEGIN_YEAR_2, TREASURY_END_YEAR_2);\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TREASURY_YEAR_3_AMOUNT, TREASURY_BEGIN_YEAR_3, TREASURY_END_YEAR_3);\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TREASURY_YEAR_4_AMOUNT, TREASURY_BEGIN_YEAR_4, TREASURY_END_YEAR_4); // team\n\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TEAM_YEAR_1_AMOUNT, TREASURY_BEGIN_YEAR_1, TREASURY_END_YEAR_1, TREASURY_CLIFF_YEAR_1);\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TEAM_YEAR_2_AMOUNT, TREASURY_BEGIN_YEAR_2, TREASURY_END_YEAR_2);\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TEAM_YEAR_3_AMOUNT, TREASURY_BEGIN_YEAR_3, TREASURY_END_YEAR_3);\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TEAM_YEAR_4_AMOUNT, TREASURY_BEGIN_YEAR_4, TREASURY_END_YEAR_4);\n  const total = new TokenAmount(uni, JSBI.multiply(wholeAmount, JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18))));\n  return unclaimedUni ? total.subtract(unclaimedUni) : total;\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/chimpswap-interface-main/src/utils/computeUniCirculation.ts"],"names":["JSBI","TokenAmount","STAKING_GENESIS","STAKING_END","TREASURY_VESTING_GENESIS","TREASURY_VESTING_CLIFF","ONE_YEAR","TREASURY_BEGIN_YEAR_1","TREASURY_CLIFF_YEAR_1","TREASURY_END_YEAR_1","TREASURY_BEGIN_YEAR_2","TREASURY_END_YEAR_2","TREASURY_BEGIN_YEAR_3","TREASURY_END_YEAR_3","TREASURY_BEGIN_YEAR_4","TREASURY_END_YEAR_4","USERS_AMOUNT","STAKING_REWARDS_AMOUNT","TREASURY_YEAR_1_AMOUNT","TREASURY_YEAR_2_AMOUNT","TREASURY_YEAR_3_AMOUNT","TREASURY_YEAR_4_AMOUNT","TEAM_YEAR_1_AMOUNT","TEAM_YEAR_2_AMOUNT","TEAM_YEAR_3_AMOUNT","TEAM_YEAR_4_AMOUNT","withVesting","before","time","amount","start","end","cliff","gt","gte","add","BigInt","divide","multiply","sub","toString","subtract","computeUniCirculation","uni","blockTimestamp","unclaimedUni","wholeAmount","total","exponentiate"],"mappings":"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","sourcesContent":["import { JSBI, Token, TokenAmount } from '@uniswap/sdk'\nimport { BigNumber } from 'ethers'\nimport { STAKING_GENESIS } from '../state/stake/hooks'\n\nconst STAKING_END = STAKING_GENESIS + 60 * 60 * 24 * 60\n\nconst TREASURY_VESTING_GENESIS = 1600387200\n\n// 30 days\nconst TREASURY_VESTING_CLIFF: number = 60 * 60 * 24 * 30\n\nconst ONE_YEAR: number = 60 * 60 * 24 * 365\nconst TREASURY_BEGIN_YEAR_1 = TREASURY_VESTING_GENESIS\nconst TREASURY_CLIFF_YEAR_1 = TREASURY_BEGIN_YEAR_1 + TREASURY_VESTING_CLIFF\nconst TREASURY_END_YEAR_1 = TREASURY_BEGIN_YEAR_1 + ONE_YEAR\n\nconst TREASURY_BEGIN_YEAR_2 = TREASURY_END_YEAR_1\nconst TREASURY_END_YEAR_2 = TREASURY_BEGIN_YEAR_2 + ONE_YEAR\n\nconst TREASURY_BEGIN_YEAR_3 = TREASURY_END_YEAR_2\nconst TREASURY_END_YEAR_3 = TREASURY_BEGIN_YEAR_3 + ONE_YEAR\n\nconst TREASURY_BEGIN_YEAR_4 = TREASURY_END_YEAR_3\nconst TREASURY_END_YEAR_4 = TREASURY_BEGIN_YEAR_4 + ONE_YEAR\n\nconst USERS_AMOUNT = 150_000_000\nconst STAKING_REWARDS_AMOUNT = 20_000_000\nconst TREASURY_YEAR_1_AMOUNT = 172_000_000\nconst TREASURY_YEAR_2_AMOUNT = 129_000_00\nconst TREASURY_YEAR_3_AMOUNT = 86_000_00\nconst TREASURY_YEAR_4_AMOUNT = 43_000_00\nconst TEAM_YEAR_1_AMOUNT = 160_000_000\nconst TEAM_YEAR_2_AMOUNT = 120_000_00\nconst TEAM_YEAR_3_AMOUNT = 80_000_00\nconst TEAM_YEAR_4_AMOUNT = 40_000_00\n\nfunction withVesting(before: JSBI, time: BigNumber, amount: number, start: number, end: number, cliff?: number) {\n  if (time.gt(start)) {\n    if (time.gte(end)) {\n      return JSBI.add(before, JSBI.BigInt(amount))\n    } else {\n      if ((typeof cliff === 'number' && time.gte(cliff)) || typeof cliff === 'undefined') {\n        return JSBI.add(\n          before,\n          JSBI.divide(\n            JSBI.multiply(JSBI.BigInt(amount), JSBI.BigInt(time.sub(start).toString())),\n            JSBI.subtract(JSBI.BigInt(end), JSBI.BigInt(start))\n          )\n        )\n      }\n    }\n  }\n  return before\n}\n\nexport function computeUniCirculation(\n  uni: Token,\n  blockTimestamp: BigNumber,\n  unclaimedUni: TokenAmount | undefined\n): TokenAmount {\n  let wholeAmount = JSBI.BigInt(USERS_AMOUNT)\n\n  // staking rewards\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, STAKING_REWARDS_AMOUNT, STAKING_GENESIS, STAKING_END)\n\n  // treasury vesting\n  wholeAmount = withVesting(\n    wholeAmount,\n    blockTimestamp,\n    TREASURY_YEAR_1_AMOUNT,\n    TREASURY_BEGIN_YEAR_1,\n    TREASURY_END_YEAR_1,\n    TREASURY_CLIFF_YEAR_1\n  )\n  wholeAmount = withVesting(\n    wholeAmount,\n    blockTimestamp,\n    TREASURY_YEAR_2_AMOUNT,\n    TREASURY_BEGIN_YEAR_2,\n    TREASURY_END_YEAR_2\n  )\n  wholeAmount = withVesting(\n    wholeAmount,\n    blockTimestamp,\n    TREASURY_YEAR_3_AMOUNT,\n    TREASURY_BEGIN_YEAR_3,\n    TREASURY_END_YEAR_3\n  )\n  wholeAmount = withVesting(\n    wholeAmount,\n    blockTimestamp,\n    TREASURY_YEAR_4_AMOUNT,\n    TREASURY_BEGIN_YEAR_4,\n    TREASURY_END_YEAR_4\n  )\n\n  // team\n  wholeAmount = withVesting(\n    wholeAmount,\n    blockTimestamp,\n    TEAM_YEAR_1_AMOUNT,\n    TREASURY_BEGIN_YEAR_1,\n    TREASURY_END_YEAR_1,\n    TREASURY_CLIFF_YEAR_1\n  )\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TEAM_YEAR_2_AMOUNT, TREASURY_BEGIN_YEAR_2, TREASURY_END_YEAR_2)\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TEAM_YEAR_3_AMOUNT, TREASURY_BEGIN_YEAR_3, TREASURY_END_YEAR_3)\n  wholeAmount = withVesting(wholeAmount, blockTimestamp, TEAM_YEAR_4_AMOUNT, TREASURY_BEGIN_YEAR_4, TREASURY_END_YEAR_4)\n\n  const total = new TokenAmount(uni, JSBI.multiply(wholeAmount, JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(18))))\n  return unclaimedUni ? total.subtract(unclaimedUni) : total\n}\n"]},"metadata":{},"sourceType":"module"}