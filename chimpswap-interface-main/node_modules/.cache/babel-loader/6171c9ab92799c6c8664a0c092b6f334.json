{"ast":null,"code":"import { useMemo } from 'react';\nimport { isAddress } from '../../utils';\nexport function filterTokens(tokens, search) {\n  if (search.length === 0) return tokens;\n  const searchingAddress = isAddress(search);\n\n  if (searchingAddress) {\n    return tokens.filter(token => token.address === searchingAddress);\n  }\n\n  const lowerSearchParts = search.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n\n  if (lowerSearchParts.length === 0) {\n    return tokens;\n  }\n\n  const matchesSearch = s => {\n    const sParts = s.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n    return lowerSearchParts.every(p => p.length === 0 || sParts.some(sp => sp.startsWith(p) || sp.endsWith(p)));\n  };\n\n  return tokens.filter(token => {\n    const {\n      symbol,\n      name\n    } = token;\n    return symbol && matchesSearch(symbol) || name && matchesSearch(name);\n  });\n}\nexport function useSortedTokensByQuery(tokens, searchQuery) {\n  return useMemo(() => {\n    if (!tokens) {\n      return [];\n    }\n\n    const symbolMatch = searchQuery.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n\n    if (symbolMatch.length > 1) {\n      return tokens;\n    }\n\n    const exactMatches = [];\n    const symbolSubtrings = [];\n    const rest = []; // sort tokens by exact match -> subtring on symbol match -> rest\n\n    tokens.map(token => {\n      var _token$symbol, _token$symbol2;\n\n      if (((_token$symbol = token.symbol) === null || _token$symbol === void 0 ? void 0 : _token$symbol.toLowerCase()) === symbolMatch[0]) {\n        return exactMatches.push(token);\n      } else if ((_token$symbol2 = token.symbol) === null || _token$symbol2 === void 0 ? void 0 : _token$symbol2.toLowerCase().startsWith(searchQuery.toLowerCase().trim())) {\n        return symbolSubtrings.push(token);\n      } else {\n        return rest.push(token);\n      }\n    });\n    return [...exactMatches, ...symbolSubtrings, ...rest];\n  }, [tokens, searchQuery]);\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/uniswap-interface-main/src/components/SearchModal/filtering.ts"],"names":["useMemo","isAddress","filterTokens","tokens","search","length","searchingAddress","filter","token","address","lowerSearchParts","toLowerCase","split","s","matchesSearch","sParts","every","p","some","sp","startsWith","endsWith","symbol","name","useSortedTokensByQuery","searchQuery","symbolMatch","exactMatches","symbolSubtrings","rest","map","push","trim"],"mappings":"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","sourcesContent":["import { useMemo } from 'react'\nimport { isAddress } from '../../utils'\nimport { Token } from '@uniswap/sdk'\n\nexport function filterTokens(tokens: Token[], search: string): Token[] {\n  if (search.length === 0) return tokens\n\n  const searchingAddress = isAddress(search)\n\n  if (searchingAddress) {\n    return tokens.filter(token => token.address === searchingAddress)\n  }\n\n  const lowerSearchParts = search\n    .toLowerCase()\n    .split(/\\s+/)\n    .filter(s => s.length > 0)\n\n  if (lowerSearchParts.length === 0) {\n    return tokens\n  }\n\n  const matchesSearch = (s: string): boolean => {\n    const sParts = s\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter(s => s.length > 0)\n\n    return lowerSearchParts.every(p => p.length === 0 || sParts.some(sp => sp.startsWith(p) || sp.endsWith(p)))\n  }\n\n  return tokens.filter(token => {\n    const { symbol, name } = token\n    return (symbol && matchesSearch(symbol)) || (name && matchesSearch(name))\n  })\n}\n\nexport function useSortedTokensByQuery(tokens: Token[] | undefined, searchQuery: string): Token[] {\n  return useMemo(() => {\n    if (!tokens) {\n      return []\n    }\n\n    const symbolMatch = searchQuery\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter(s => s.length > 0)\n\n    if (symbolMatch.length > 1) {\n      return tokens\n    }\n\n    const exactMatches: Token[] = []\n    const symbolSubtrings: Token[] = []\n    const rest: Token[] = []\n\n    // sort tokens by exact match -> subtring on symbol match -> rest\n    tokens.map(token => {\n      if (token.symbol?.toLowerCase() === symbolMatch[0]) {\n        return exactMatches.push(token)\n      } else if (token.symbol?.toLowerCase().startsWith(searchQuery.toLowerCase().trim())) {\n        return symbolSubtrings.push(token)\n      } else {\n        return rest.push(token)\n      }\n    })\n\n    return [...exactMatches, ...symbolSubtrings, ...rest]\n  }, [tokens, searchQuery])\n}\n"]},"metadata":{},"sourceType":"module"}