{"ast":null,"code":"import { ZERO_PERCENT, ONE_HUNDRED_PERCENT } from './../constants/index';\nimport { currencyEquals } from '@uniswap/sdk'; // returns whether tradeB is better than tradeA by at least a threshold percentage amount\n\nexport function isTradeBetter(tradeA, tradeB, minimumDelta = ZERO_PERCENT) {\n  if (tradeA && !tradeB) return false;\n  if (tradeB && !tradeA) return true;\n  if (!tradeA || !tradeB) return undefined;\n\n  if (tradeA.tradeType !== tradeB.tradeType || !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) || !currencyEquals(tradeB.outputAmount.currency, tradeB.outputAmount.currency)) {\n    throw new Error('Trades are not comparable');\n  }\n\n  if (minimumDelta.equalTo(ZERO_PERCENT)) {\n    return tradeA.executionPrice.lessThan(tradeB.executionPrice);\n  } else {\n    return tradeA.executionPrice.raw.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice);\n  }\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/uniswap-interface-main/src/utils/trades.ts"],"names":["ZERO_PERCENT","ONE_HUNDRED_PERCENT","currencyEquals","isTradeBetter","tradeA","tradeB","minimumDelta","undefined","tradeType","inputAmount","currency","outputAmount","Error","equalTo","executionPrice","lessThan","raw","multiply","add"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,mBAAvB,QAAkD,sBAAlD;AACA,SAAyBC,cAAzB,QAA+C,cAA/C,C,CAEA;;AACA,OAAO,SAASC,aAAT,CACLC,MADK,EAELC,MAFK,EAGLC,YAAqB,GAAGN,YAHnB,EAIgB;AACrB,MAAII,MAAM,IAAI,CAACC,MAAf,EAAuB,OAAO,KAAP;AACvB,MAAIA,MAAM,IAAI,CAACD,MAAf,EAAuB,OAAO,IAAP;AACvB,MAAI,CAACA,MAAD,IAAW,CAACC,MAAhB,EAAwB,OAAOE,SAAP;;AAExB,MACEH,MAAM,CAACI,SAAP,KAAqBH,MAAM,CAACG,SAA5B,IACA,CAACN,cAAc,CAACE,MAAM,CAACK,WAAP,CAAmBC,QAApB,EAA8BL,MAAM,CAACI,WAAP,CAAmBC,QAAjD,CADf,IAEA,CAACR,cAAc,CAACG,MAAM,CAACM,YAAP,CAAoBD,QAArB,EAA+BL,MAAM,CAACM,YAAP,CAAoBD,QAAnD,CAHjB,EAIE;AACA,UAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAED,MAAIN,YAAY,CAACO,OAAb,CAAqBb,YAArB,CAAJ,EAAwC;AACtC,WAAOI,MAAM,CAACU,cAAP,CAAsBC,QAAtB,CAA+BV,MAAM,CAACS,cAAtC,CAAP;AACD,GAFD,MAEO;AACL,WAAOV,MAAM,CAACU,cAAP,CAAsBE,GAAtB,CAA0BC,QAA1B,CAAmCX,YAAY,CAACY,GAAb,CAAiBjB,mBAAjB,CAAnC,EAA0Ec,QAA1E,CAAmFV,MAAM,CAACS,cAA1F,CAAP;AACD;AACF","sourcesContent":["import { ZERO_PERCENT, ONE_HUNDRED_PERCENT } from './../constants/index'\nimport { Trade, Percent, currencyEquals } from '@uniswap/sdk'\n\n// returns whether tradeB is better than tradeA by at least a threshold percentage amount\nexport function isTradeBetter(\n  tradeA: Trade | undefined | null,\n  tradeB: Trade | undefined | null,\n  minimumDelta: Percent = ZERO_PERCENT\n): boolean | undefined {\n  if (tradeA && !tradeB) return false\n  if (tradeB && !tradeA) return true\n  if (!tradeA || !tradeB) return undefined\n\n  if (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\n    !currencyEquals(tradeB.outputAmount.currency, tradeB.outputAmount.currency)\n  ) {\n    throw new Error('Trades are not comparable')\n  }\n\n  if (minimumDelta.equalTo(ZERO_PERCENT)) {\n    return tradeA.executionPrice.lessThan(tradeB.executionPrice)\n  } else {\n    return tradeA.executionPrice.raw.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}