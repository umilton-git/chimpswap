{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction isAccount(value) {\n  return value != null && isHexString(value.privateKey, 32) && value.address != null;\n}\n\nfunction hasMnemonic(value) {\n  const mnemonic = value.mnemonic;\n  return mnemonic && mnemonic.phrase;\n}\n\nexport class Wallet extends Signer {\n  constructor(privateKey, provider) {\n    logger.checkNew(new.target, Wallet);\n    super();\n\n    if (isAccount(privateKey)) {\n      const signingKey = new SigningKey(privateKey.privateKey);\n      defineReadOnly(this, \"_signingKey\", () => signingKey);\n      defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n\n      if (this.address !== getAddress(privateKey.address)) {\n        logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n      }\n\n      if (hasMnemonic(privateKey)) {\n        const srcMnemonic = privateKey.mnemonic;\n        defineReadOnly(this, \"_mnemonic\", () => ({\n          phrase: srcMnemonic.phrase,\n          path: srcMnemonic.path || defaultPath,\n          locale: srcMnemonic.locale || \"en\"\n        }));\n        const mnemonic = this.mnemonic;\n        const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n\n        if (computeAddress(node.privateKey) !== this.address) {\n          logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n        }\n      } else {\n        defineReadOnly(this, \"_mnemonic\", () => null);\n      }\n    } else {\n      if (SigningKey.isSigningKey(privateKey)) {\n        /* istanbul ignore if */\n        if (privateKey.curve !== \"secp256k1\") {\n          logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n        }\n\n        defineReadOnly(this, \"_signingKey\", () => privateKey);\n      } else {\n        const signingKey = new SigningKey(privateKey);\n        defineReadOnly(this, \"_signingKey\", () => signingKey);\n      }\n\n      defineReadOnly(this, \"_mnemonic\", () => null);\n      defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n    }\n    /* istanbul ignore if */\n\n\n    if (provider && !Provider.isProvider(provider)) {\n      logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n    }\n\n    defineReadOnly(this, \"provider\", provider || null);\n  }\n\n  get mnemonic() {\n    return this._mnemonic();\n  }\n\n  get privateKey() {\n    return this._signingKey().privateKey;\n  }\n\n  get publicKey() {\n    return this._signingKey().publicKey;\n  }\n\n  getAddress() {\n    return Promise.resolve(this.address);\n  }\n\n  connect(provider) {\n    return new Wallet(this, provider);\n  }\n\n  signTransaction(transaction) {\n    return resolveProperties(transaction).then(tx => {\n      if (tx.from != null) {\n        if (getAddress(tx.from) !== this.address) {\n          logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n        }\n\n        delete tx.from;\n      }\n\n      const signature = this._signingKey().signDigest(keccak256(serialize(tx)));\n\n      return serialize(tx, signature);\n    });\n  }\n\n  signMessage(message) {\n    return Promise.resolve(joinSignature(this._signingKey().signDigest(hashMessage(message))));\n  }\n\n  encrypt(password, options, progressCallback) {\n    if (typeof options === \"function\" && !progressCallback) {\n      progressCallback = options;\n      options = {};\n    }\n\n    if (progressCallback && typeof progressCallback !== \"function\") {\n      throw new Error(\"invalid callback\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    return encryptKeystore(this, password, options, progressCallback);\n  }\n  /**\n   *  Static methods to create Wallet instances.\n   */\n\n\n  static createRandom(options) {\n    let entropy = randomBytes(16);\n\n    if (!options) {\n      options = {};\n    }\n\n    if (options.extraEntropy) {\n      entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n    }\n\n    const mnemonic = entropyToMnemonic(entropy, options.locale);\n    return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n  }\n\n  static fromEncryptedJson(json, password, progressCallback) {\n    return decryptJsonWallet(json, password, progressCallback).then(account => {\n      return new Wallet(account);\n    });\n  }\n\n  static fromEncryptedJsonSync(json, password) {\n    return new Wallet(decryptJsonWalletSync(json, password));\n  }\n\n  static fromMnemonic(mnemonic, path, wordlist) {\n    if (!path) {\n      path = defaultPath;\n    }\n\n    return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n  }\n\n}\nexport function verifyMessage(message, signature) {\n  return recoverAddress(hashMessage(message), signature);\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction isAccount(value) {\n    return (value != null && isHexString(value.privateKey, 32) && value.address != null);\n}\nfunction hasMnemonic(value) {\n    const mnemonic = value.mnemonic;\n    return (mnemonic && mnemonic.phrase);\n}\nexport class Wallet extends Signer {\n    constructor(privateKey, provider) {\n        logger.checkNew(new.target, Wallet);\n        super();\n        if (isAccount(privateKey)) {\n            const signingKey = new SigningKey(privateKey.privateKey);\n            defineReadOnly(this, \"_signingKey\", () => signingKey);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n            if (this.address !== getAddress(privateKey.address)) {\n                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n            if (hasMnemonic(privateKey)) {\n                const srcMnemonic = privateKey.mnemonic;\n                defineReadOnly(this, \"_mnemonic\", () => ({\n                    phrase: srcMnemonic.phrase,\n                    path: srcMnemonic.path || defaultPath,\n                    locale: srcMnemonic.locale || \"en\"\n                }));\n                const mnemonic = this.mnemonic;\n                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if (computeAddress(node.privateKey) !== this.address) {\n                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            }\n            else {\n                defineReadOnly(this, \"_mnemonic\", () => null);\n            }\n        }\n        else {\n            if (SigningKey.isSigningKey(privateKey)) {\n                /* istanbul ignore if */\n                if (privateKey.curve !== \"secp256k1\") {\n                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                defineReadOnly(this, \"_signingKey\", () => privateKey);\n            }\n            else {\n                const signingKey = new SigningKey(privateKey);\n                defineReadOnly(this, \"_signingKey\", () => signingKey);\n            }\n            defineReadOnly(this, \"_mnemonic\", () => null);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        }\n        /* istanbul ignore if */\n        if (provider && !Provider.isProvider(provider)) {\n            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n    get mnemonic() { return this._mnemonic(); }\n    get privateKey() { return this._signingKey().privateKey; }\n    get publicKey() { return this._signingKey().publicKey; }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    connect(provider) {\n        return new Wallet(this, provider);\n    }\n    signTransaction(transaction) {\n        return resolveProperties(transaction).then((tx) => {\n            if (tx.from != null) {\n                if (getAddress(tx.from) !== this.address) {\n                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n            const signature = this._signingKey().signDigest(keccak256(serialize(tx)));\n            return serialize(tx, signature);\n        });\n    }\n    signMessage(message) {\n        return Promise.resolve(joinSignature(this._signingKey().signDigest(hashMessage(message))));\n    }\n    encrypt(password, options, progressCallback) {\n        if (typeof (options) === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n        if (progressCallback && typeof (progressCallback) !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return encryptKeystore(this, password, options, progressCallback);\n    }\n    /**\n     *  Static methods to create Wallet instances.\n     */\n    static createRandom(options) {\n        let entropy = randomBytes(16);\n        if (!options) {\n            options = {};\n        }\n        if (options.extraEntropy) {\n            entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n        }\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n    static fromEncryptedJson(json, password, progressCallback) {\n        return decryptJsonWallet(json, password, progressCallback).then((account) => {\n            return new Wallet(account);\n        });\n    }\n    static fromEncryptedJsonSync(json, password) {\n        return new Wallet(decryptJsonWalletSync(json, password));\n    }\n    static fromMnemonic(mnemonic, path, wordlist) {\n        if (!path) {\n            path = defaultPath;\n        }\n        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n}\nexport function verifyMessage(message, signature) {\n    return recoverAddress(hashMessage(message), signature);\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}