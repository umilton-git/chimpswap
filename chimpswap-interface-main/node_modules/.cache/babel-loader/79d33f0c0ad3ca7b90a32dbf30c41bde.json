{"ast":null,"code":"import { UNI, PRELOADED_PROPOSALS } from './../../constants/index';\nimport { TokenAmount } from '@uniswap/sdk';\nimport { isAddress } from 'ethers/lib/utils';\nimport { useGovernanceContract, useUniContract } from '../../hooks/useContract';\nimport { useSingleCallResult, useSingleContractMultipleData } from '../multicall/hooks';\nimport { useActiveWeb3React } from '../../hooks';\nimport { ethers, utils } from 'ethers';\nimport { calculateGasMargin } from '../../utils';\nimport { useTransactionAdder } from '../transactions/hooks';\nimport { useState, useEffect, useCallback } from 'react';\nimport { abi as GOV_ABI } from '@uniswap/governance/build/GovernorAlpha.json';\n\nconst enumerateProposalState = state => {\n  const proposalStates = ['pending', 'active', 'canceled', 'defeated', 'succeeded', 'queued', 'expired', 'executed'];\n  return proposalStates[state];\n}; // get count of all proposals made\n\n\nexport function useProposalCount() {\n  const gov = useGovernanceContract();\n  const res = useSingleCallResult(gov, 'proposalCount');\n\n  if (res.result && !res.loading) {\n    return parseInt(res.result[0]);\n  }\n\n  return undefined;\n}\n/**\n * Need proposal events to get description data emitted from\n * new proposal event.\n */\n\nexport function useDataFromEventLogs() {\n  var _govContract$filters;\n\n  const {\n    library\n  } = useActiveWeb3React();\n  const [formattedEvents, setFormattedEvents] = useState();\n  const govContract = useGovernanceContract(); // create filter for these specific events\n\n  const filter = { ...(govContract === null || govContract === void 0 ? void 0 : (_govContract$filters = govContract.filters) === null || _govContract$filters === void 0 ? void 0 : _govContract$filters['ProposalCreated']()),\n    fromBlock: 0,\n    toBlock: 'latest'\n  };\n  const eventParser = new ethers.utils.Interface(GOV_ABI);\n  useEffect(() => {\n    async function fetchData() {\n      const pastEvents = await (library === null || library === void 0 ? void 0 : library.getLogs(filter)); // reverse events to get them from newest to odlest\n\n      const formattedEventData = pastEvents === null || pastEvents === void 0 ? void 0 : pastEvents.map(event => {\n        const eventParsed = eventParser.parseLog(event).args;\n        return {\n          description: eventParsed.description,\n          details: eventParsed.targets.map((target, i) => {\n            const signature = eventParsed.signatures[i];\n            const [name, types] = signature.substr(0, signature.length - 1).split('(');\n            const calldata = eventParsed.calldatas[i];\n            const decoded = utils.defaultAbiCoder.decode(types.split(','), calldata);\n            return {\n              target,\n              functionSig: name,\n              callData: decoded.join(', ')\n            };\n          })\n        };\n      }).reverse();\n      setFormattedEvents(formattedEventData);\n    }\n\n    if (!formattedEvents) {\n      fetchData();\n    }\n  }, [eventParser, filter, library, formattedEvents]);\n  return formattedEvents;\n} // get data for all past and active proposals\n\nexport function useAllProposalData() {\n  const proposalCount = useProposalCount();\n  const govContract = useGovernanceContract();\n  const proposalIndexes = [];\n\n  for (let i = 1; i <= (proposalCount !== null && proposalCount !== void 0 ? proposalCount : 0); i++) {\n    proposalIndexes.push([i]);\n  } // get metadata from past events\n\n\n  const formattedEvents = useDataFromEventLogs(); // get all proposal entities\n\n  const allProposals = useSingleContractMultipleData(govContract, 'proposals', proposalIndexes); // get all proposal states\n\n  const allProposalStates = useSingleContractMultipleData(govContract, 'state', proposalIndexes);\n\n  if (formattedEvents && allProposals && allProposalStates) {\n    allProposals.reverse();\n    allProposalStates.reverse();\n    return allProposals.filter((p, i) => {\n      var _allProposalStates$i;\n\n      return Boolean(p.result) && Boolean((_allProposalStates$i = allProposalStates[i]) === null || _allProposalStates$i === void 0 ? void 0 : _allProposalStates$i.result) && Boolean(formattedEvents[i]);\n    }).map((p, i) => {\n      var _allProposals$i, _allProposals$i$resul, _allProposals$i2, _allProposals$i2$resu, _enumerateProposalSta, _allProposalStates$i2, _allProposalStates$i3, _allProposals$i3, _allProposals$i3$resu, _allProposals$i4, _allProposals$i4$resu, _allProposals$i5, _allProposals$i5$resu, _allProposals$i5$resu2, _allProposals$i6, _allProposals$i6$resu, _allProposals$i6$resu2;\n\n      const description = PRELOADED_PROPOSALS.get(allProposals.length - i - 1) || formattedEvents[i].description;\n      const formattedProposal = {\n        id: (_allProposals$i = allProposals[i]) === null || _allProposals$i === void 0 ? void 0 : (_allProposals$i$resul = _allProposals$i.result) === null || _allProposals$i$resul === void 0 ? void 0 : _allProposals$i$resul.id.toString(),\n        title: (description === null || description === void 0 ? void 0 : description.split(/# |\\n/g)[1]) || 'Untitled',\n        description: description || 'No description.',\n        proposer: (_allProposals$i2 = allProposals[i]) === null || _allProposals$i2 === void 0 ? void 0 : (_allProposals$i2$resu = _allProposals$i2.result) === null || _allProposals$i2$resu === void 0 ? void 0 : _allProposals$i2$resu.proposer,\n        status: (_enumerateProposalSta = enumerateProposalState((_allProposalStates$i2 = allProposalStates[i]) === null || _allProposalStates$i2 === void 0 ? void 0 : (_allProposalStates$i3 = _allProposalStates$i2.result) === null || _allProposalStates$i3 === void 0 ? void 0 : _allProposalStates$i3[0])) !== null && _enumerateProposalSta !== void 0 ? _enumerateProposalSta : 'Undetermined',\n        forCount: parseFloat(ethers.utils.formatUnits((_allProposals$i3 = allProposals[i]) === null || _allProposals$i3 === void 0 ? void 0 : (_allProposals$i3$resu = _allProposals$i3.result) === null || _allProposals$i3$resu === void 0 ? void 0 : _allProposals$i3$resu.forVotes.toString(), 18)),\n        againstCount: parseFloat(ethers.utils.formatUnits((_allProposals$i4 = allProposals[i]) === null || _allProposals$i4 === void 0 ? void 0 : (_allProposals$i4$resu = _allProposals$i4.result) === null || _allProposals$i4$resu === void 0 ? void 0 : _allProposals$i4$resu.againstVotes.toString(), 18)),\n        startBlock: parseInt((_allProposals$i5 = allProposals[i]) === null || _allProposals$i5 === void 0 ? void 0 : (_allProposals$i5$resu = _allProposals$i5.result) === null || _allProposals$i5$resu === void 0 ? void 0 : (_allProposals$i5$resu2 = _allProposals$i5$resu.startBlock) === null || _allProposals$i5$resu2 === void 0 ? void 0 : _allProposals$i5$resu2.toString()),\n        endBlock: parseInt((_allProposals$i6 = allProposals[i]) === null || _allProposals$i6 === void 0 ? void 0 : (_allProposals$i6$resu = _allProposals$i6.result) === null || _allProposals$i6$resu === void 0 ? void 0 : (_allProposals$i6$resu2 = _allProposals$i6$resu.endBlock) === null || _allProposals$i6$resu2 === void 0 ? void 0 : _allProposals$i6$resu2.toString()),\n        details: formattedEvents[i].details\n      };\n      return formattedProposal;\n    });\n  } else {\n    return [];\n  }\n}\nexport function useProposalData(id) {\n  const allProposalData = useAllProposalData();\n  return allProposalData === null || allProposalData === void 0 ? void 0 : allProposalData.find(p => p.id === id);\n} // get the users delegatee if it exists\n\nexport function useUserDelegatee() {\n  var _result$;\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const uniContract = useUniContract();\n  const {\n    result\n  } = useSingleCallResult(uniContract, 'delegates', [account !== null && account !== void 0 ? account : undefined]);\n  return (_result$ = result === null || result === void 0 ? void 0 : result[0]) !== null && _result$ !== void 0 ? _result$ : undefined;\n} // gets the users current votes\n\nexport function useUserVotes() {\n  var _useSingleCallResult, _useSingleCallResult$;\n\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const uniContract = useUniContract(); // check for available votes\n\n  const uni = chainId ? UNI[chainId] : undefined;\n  const votes = (_useSingleCallResult = useSingleCallResult(uniContract, 'getCurrentVotes', [account !== null && account !== void 0 ? account : undefined])) === null || _useSingleCallResult === void 0 ? void 0 : (_useSingleCallResult$ = _useSingleCallResult.result) === null || _useSingleCallResult$ === void 0 ? void 0 : _useSingleCallResult$[0];\n  return votes && uni ? new TokenAmount(uni, votes) : undefined;\n} // fetch available votes as of block (usually proposal start block)\n\nexport function useUserVotesAsOfBlock(block) {\n  var _useSingleCallResult2, _useSingleCallResult3;\n\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const uniContract = useUniContract(); // check for available votes\n\n  const uni = chainId ? UNI[chainId] : undefined;\n  const votes = (_useSingleCallResult2 = useSingleCallResult(uniContract, 'getPriorVotes', [account !== null && account !== void 0 ? account : undefined, block !== null && block !== void 0 ? block : undefined])) === null || _useSingleCallResult2 === void 0 ? void 0 : (_useSingleCallResult3 = _useSingleCallResult2.result) === null || _useSingleCallResult3 === void 0 ? void 0 : _useSingleCallResult3[0];\n  return votes && uni ? new TokenAmount(uni, votes) : undefined;\n}\nexport function useDelegateCallback() {\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const addTransaction = useTransactionAdder();\n  const uniContract = useUniContract();\n  return useCallback(delegatee => {\n    if (!library || !chainId || !account || !isAddress(delegatee !== null && delegatee !== void 0 ? delegatee : '')) return undefined;\n    const args = [delegatee];\n    if (!uniContract) throw new Error('No UNI Contract!');\n    return uniContract.estimateGas.delegate(...args, {}).then(estimatedGasLimit => {\n      return uniContract.delegate(...args, {\n        value: null,\n        gasLimit: calculateGasMargin(estimatedGasLimit)\n      }).then(response => {\n        addTransaction(response, {\n          summary: `Delegated votes`\n        });\n        return response.hash;\n      });\n    });\n  }, [account, addTransaction, chainId, library, uniContract]);\n}\nexport function useVoteCallback() {\n  const {\n    account\n  } = useActiveWeb3React();\n  const govContract = useGovernanceContract();\n  const addTransaction = useTransactionAdder();\n  const voteCallback = useCallback((proposalId, support) => {\n    if (!account || !govContract || !proposalId) return;\n    const args = [proposalId, support];\n    return govContract.estimateGas.castVote(...args, {}).then(estimatedGasLimit => {\n      return govContract.castVote(...args, {\n        value: null,\n        gasLimit: calculateGasMargin(estimatedGasLimit)\n      }).then(response => {\n        addTransaction(response, {\n          summary: `Voted ${support ? 'for ' : 'against'} proposal ${proposalId}`\n        });\n        return response.hash;\n      });\n    });\n  }, [account, addTransaction, govContract]);\n  return {\n    voteCallback\n  };\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/chimpswap-interface-main/src/state/governance/hooks.ts"],"names":["UNI","PRELOADED_PROPOSALS","TokenAmount","isAddress","useGovernanceContract","useUniContract","useSingleCallResult","useSingleContractMultipleData","useActiveWeb3React","ethers","utils","calculateGasMargin","useTransactionAdder","useState","useEffect","useCallback","abi","GOV_ABI","enumerateProposalState","state","proposalStates","useProposalCount","gov","res","result","loading","parseInt","undefined","useDataFromEventLogs","library","formattedEvents","setFormattedEvents","govContract","filter","filters","fromBlock","toBlock","eventParser","Interface","fetchData","pastEvents","getLogs","formattedEventData","map","event","eventParsed","parseLog","args","description","details","targets","target","i","signature","signatures","name","types","substr","length","split","calldata","calldatas","decoded","defaultAbiCoder","decode","functionSig","callData","join","reverse","useAllProposalData","proposalCount","proposalIndexes","push","allProposals","allProposalStates","p","Boolean","get","formattedProposal","id","toString","title","proposer","status","forCount","parseFloat","formatUnits","forVotes","againstCount","againstVotes","startBlock","endBlock","useProposalData","allProposalData","find","useUserDelegatee","account","uniContract","useUserVotes","chainId","uni","votes","useUserVotesAsOfBlock","block","useDelegateCallback","addTransaction","delegatee","Error","estimateGas","delegate","then","estimatedGasLimit","value","gasLimit","response","summary","hash","useVoteCallback","voteCallback","proposalId","support","castVote"],"mappings":"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","sourcesContent":["import { UNI, PRELOADED_PROPOSALS } from './../../constants/index'\nimport { TokenAmount } from '@uniswap/sdk'\nimport { isAddress } from 'ethers/lib/utils'\nimport { useGovernanceContract, useUniContract } from '../../hooks/useContract'\nimport { useSingleCallResult, useSingleContractMultipleData } from '../multicall/hooks'\nimport { useActiveWeb3React } from '../../hooks'\nimport { ethers, utils } from 'ethers'\nimport { calculateGasMargin } from '../../utils'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { useTransactionAdder } from '../transactions/hooks'\nimport { useState, useEffect, useCallback } from 'react'\nimport { abi as GOV_ABI } from '@uniswap/governance/build/GovernorAlpha.json'\n\ninterface ProposalDetail {\n  target: string\n  functionSig: string\n  callData: string\n}\n\nexport interface ProposalData {\n  id: string\n  title: string\n  description: string\n  proposer: string\n  status: string\n  forCount: number\n  againstCount: number\n  startBlock: number\n  endBlock: number\n  details: ProposalDetail[]\n}\n\nconst enumerateProposalState = (state: number) => {\n  const proposalStates = ['pending', 'active', 'canceled', 'defeated', 'succeeded', 'queued', 'expired', 'executed']\n  return proposalStates[state]\n}\n\n// get count of all proposals made\nexport function useProposalCount(): number | undefined {\n  const gov = useGovernanceContract()\n  const res = useSingleCallResult(gov, 'proposalCount')\n  if (res.result && !res.loading) {\n    return parseInt(res.result[0])\n  }\n  return undefined\n}\n\n/**\n * Need proposal events to get description data emitted from\n * new proposal event.\n */\nexport function useDataFromEventLogs() {\n  const { library } = useActiveWeb3React()\n  const [formattedEvents, setFormattedEvents] = useState<any>()\n  const govContract = useGovernanceContract()\n\n  // create filter for these specific events\n  const filter = { ...govContract?.filters?.['ProposalCreated'](), fromBlock: 0, toBlock: 'latest' }\n  const eventParser = new ethers.utils.Interface(GOV_ABI)\n\n  useEffect(() => {\n    async function fetchData() {\n      const pastEvents = await library?.getLogs(filter)\n      // reverse events to get them from newest to odlest\n      const formattedEventData = pastEvents\n        ?.map(event => {\n          const eventParsed = eventParser.parseLog(event).args\n          return {\n            description: eventParsed.description,\n            details: eventParsed.targets.map((target: string, i: number) => {\n              const signature = eventParsed.signatures[i]\n              const [name, types] = signature.substr(0, signature.length - 1).split('(')\n\n              const calldata = eventParsed.calldatas[i]\n              const decoded = utils.defaultAbiCoder.decode(types.split(','), calldata)\n\n              return {\n                target,\n                functionSig: name,\n                callData: decoded.join(', ')\n              }\n            })\n          }\n        })\n        .reverse()\n      setFormattedEvents(formattedEventData)\n    }\n    if (!formattedEvents) {\n      fetchData()\n    }\n  }, [eventParser, filter, library, formattedEvents])\n\n  return formattedEvents\n}\n\n// get data for all past and active proposals\nexport function useAllProposalData() {\n  const proposalCount = useProposalCount()\n  const govContract = useGovernanceContract()\n\n  const proposalIndexes = []\n  for (let i = 1; i <= (proposalCount ?? 0); i++) {\n    proposalIndexes.push([i])\n  }\n\n  // get metadata from past events\n  const formattedEvents = useDataFromEventLogs()\n\n  // get all proposal entities\n  const allProposals = useSingleContractMultipleData(govContract, 'proposals', proposalIndexes)\n\n  // get all proposal states\n  const allProposalStates = useSingleContractMultipleData(govContract, 'state', proposalIndexes)\n\n  if (formattedEvents && allProposals && allProposalStates) {\n    allProposals.reverse()\n    allProposalStates.reverse()\n\n    return allProposals\n      .filter((p, i) => {\n        return Boolean(p.result) && Boolean(allProposalStates[i]?.result) && Boolean(formattedEvents[i])\n      })\n      .map((p, i) => {\n        const description = PRELOADED_PROPOSALS.get(allProposals.length - i - 1) || formattedEvents[i].description\n        const formattedProposal: ProposalData = {\n          id: allProposals[i]?.result?.id.toString(),\n          title: description?.split(/# |\\n/g)[1] || 'Untitled',\n          description: description || 'No description.',\n          proposer: allProposals[i]?.result?.proposer,\n          status: enumerateProposalState(allProposalStates[i]?.result?.[0]) ?? 'Undetermined',\n          forCount: parseFloat(ethers.utils.formatUnits(allProposals[i]?.result?.forVotes.toString(), 18)),\n          againstCount: parseFloat(ethers.utils.formatUnits(allProposals[i]?.result?.againstVotes.toString(), 18)),\n          startBlock: parseInt(allProposals[i]?.result?.startBlock?.toString()),\n          endBlock: parseInt(allProposals[i]?.result?.endBlock?.toString()),\n          details: formattedEvents[i].details\n        }\n        return formattedProposal\n      })\n  } else {\n    return []\n  }\n}\n\nexport function useProposalData(id: string): ProposalData | undefined {\n  const allProposalData = useAllProposalData()\n  return allProposalData?.find(p => p.id === id)\n}\n\n// get the users delegatee if it exists\nexport function useUserDelegatee(): string {\n  const { account } = useActiveWeb3React()\n  const uniContract = useUniContract()\n  const { result } = useSingleCallResult(uniContract, 'delegates', [account ?? undefined])\n  return result?.[0] ?? undefined\n}\n\n// gets the users current votes\nexport function useUserVotes(): TokenAmount | undefined {\n  const { account, chainId } = useActiveWeb3React()\n  const uniContract = useUniContract()\n\n  // check for available votes\n  const uni = chainId ? UNI[chainId] : undefined\n  const votes = useSingleCallResult(uniContract, 'getCurrentVotes', [account ?? undefined])?.result?.[0]\n  return votes && uni ? new TokenAmount(uni, votes) : undefined\n}\n\n// fetch available votes as of block (usually proposal start block)\nexport function useUserVotesAsOfBlock(block: number | undefined): TokenAmount | undefined {\n  const { account, chainId } = useActiveWeb3React()\n  const uniContract = useUniContract()\n\n  // check for available votes\n  const uni = chainId ? UNI[chainId] : undefined\n  const votes = useSingleCallResult(uniContract, 'getPriorVotes', [account ?? undefined, block ?? undefined])\n    ?.result?.[0]\n  return votes && uni ? new TokenAmount(uni, votes) : undefined\n}\n\nexport function useDelegateCallback(): (delegatee: string | undefined) => undefined | Promise<string> {\n  const { account, chainId, library } = useActiveWeb3React()\n  const addTransaction = useTransactionAdder()\n\n  const uniContract = useUniContract()\n\n  return useCallback(\n    (delegatee: string | undefined) => {\n      if (!library || !chainId || !account || !isAddress(delegatee ?? '')) return undefined\n      const args = [delegatee]\n      if (!uniContract) throw new Error('No UNI Contract!')\n      return uniContract.estimateGas.delegate(...args, {}).then(estimatedGasLimit => {\n        return uniContract\n          .delegate(...args, { value: null, gasLimit: calculateGasMargin(estimatedGasLimit) })\n          .then((response: TransactionResponse) => {\n            addTransaction(response, {\n              summary: `Delegated votes`\n            })\n            return response.hash\n          })\n      })\n    },\n    [account, addTransaction, chainId, library, uniContract]\n  )\n}\n\nexport function useVoteCallback(): {\n  voteCallback: (proposalId: string | undefined, support: boolean) => undefined | Promise<string>\n} {\n  const { account } = useActiveWeb3React()\n\n  const govContract = useGovernanceContract()\n  const addTransaction = useTransactionAdder()\n\n  const voteCallback = useCallback(\n    (proposalId: string | undefined, support: boolean) => {\n      if (!account || !govContract || !proposalId) return\n      const args = [proposalId, support]\n      return govContract.estimateGas.castVote(...args, {}).then(estimatedGasLimit => {\n        return govContract\n          .castVote(...args, { value: null, gasLimit: calculateGasMargin(estimatedGasLimit) })\n          .then((response: TransactionResponse) => {\n            addTransaction(response, {\n              summary: `Voted ${support ? 'for ' : 'against'} proposal ${proposalId}`\n            })\n            return response.hash\n          })\n      })\n    },\n    [account, addTransaction, govContract]\n  )\n  return { voteCallback }\n}\n"]},"metadata":{},"sourceType":"module"}