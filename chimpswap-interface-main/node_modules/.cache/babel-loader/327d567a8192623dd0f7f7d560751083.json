{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ulyss\\\\chimpswap\\\\uniswap-interface-main\\\\src\\\\components\\\\claim\\\\AddressClaimModal.tsx\";\nimport React, { useState } from 'react';\nimport Modal from '../Modal';\nimport { AutoColumn, ColumnCenter } from '../Column';\nimport styled from 'styled-components';\nimport { DataCard, CardSection, Break } from '../earn/styled';\nimport { RowBetween } from '../Row';\nimport { TYPE, ExternalLink, CloseIcon, CustomLightSpinner, UniTokenAnimated } from '../../theme';\nimport { ButtonPrimary } from '../Button';\nimport { useClaimCallback, useUserUnclaimedAmount, useUserHasAvailableClaim } from '../../state/claim/hooks';\nimport tokenLogo from '../../assets/images/token-logo.png';\nimport Circle from \"../../assets/images/blue-loader.svg\";\nimport { Text } from 'rebass';\nimport AddressInputPanel from '../AddressInputPanel';\nimport useENS from '../../hooks/useENS';\nimport { useActiveWeb3React } from '../../hooks';\nimport { isAddress } from 'ethers/lib/utils';\nimport Confetti from '../Confetti';\nimport { CardNoise, CardBGImage, CardBGImageSmaller } from '../earn/styled';\nimport { useIsTransactionPending } from '../../state/transactions/hooks';\nimport { getEtherscanLink, shortenAddress } from '../../utils';\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n`;\nconst ModalUpper = styled(DataCard)`\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #ff007a 0%, #021d43 100%);\n`;\nconst ConfirmOrLoadingWrapper = styled.div`\n  width: 100%;\n  padding: 24px;\n  position: relative;\n  background: ${({\n  activeBG\n}) => activeBG && 'radial-gradient(76.02% 75.41% at 1.84% 0%, rgba(255, 0, 122, 0.2) 0%, rgba(33, 114, 229, 0.2) 100%), #FFFFFF;'};\n`;\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 60px 0;\n`;\nexport default function AddressClaimModal({\n  isOpen,\n  onDismiss\n}) {\n  var _groupSeparator, _groupSeparator2;\n\n  const {\n    chainId\n  } = useActiveWeb3React(); // state for smart contract input\n\n  const [typed, setTyped] = useState('');\n\n  function handleRecipientType(val) {\n    setTyped(val);\n  } // monitor for third party recipient of claim\n\n\n  const {\n    address: parsedAddress\n  } = useENS(typed); // used for UI loading states\n\n  const [attempting, setAttempting] = useState(false); // monitor the status of the claim from contracts and txns\n\n  const {\n    claimCallback\n  } = useClaimCallback(parsedAddress);\n  const unclaimedAmount = useUserUnclaimedAmount(parsedAddress); // check if the user has something available\n\n  const hasAvailableClaim = useUserHasAvailableClaim(parsedAddress);\n  const [hash, setHash] = useState(); // monitor the status of the claim from contracts and txns\n\n  const claimPending = useIsTransactionPending(hash !== null && hash !== void 0 ? hash : '');\n  const claimConfirmed = hash && !claimPending; // use the hash to monitor this txn\n\n  function onClaim() {\n    setAttempting(true);\n    claimCallback().then(hash => {\n      setHash(hash);\n    }) // reset modal and log error\n    .catch(error => {\n      setAttempting(false);\n      console.log(error);\n    });\n  }\n\n  function wrappedOnDismiss() {\n    setAttempting(false);\n    setHash(undefined);\n    setTyped('');\n    onDismiss();\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpen,\n    onDismiss: wrappedOnDismiss,\n    maxHeight: 90,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Confetti, {\n    start: Boolean(isOpen && claimConfirmed && attempting),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), !attempting && /*#__PURE__*/React.createElement(ContentWrapper, {\n    gap: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ModalUpper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardBGImage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardNoise, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardSection, {\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, \"Claim UNI Token\"), /*#__PURE__*/React.createElement(CloseIcon, {\n    onClick: wrappedOnDismiss,\n    style: {\n      zIndex: 99\n    },\n    stroke: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(TYPE.white, {\n    fontWeight: 700,\n    fontSize: 36,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }, unclaimedAmount === null || unclaimedAmount === void 0 ? void 0 : unclaimedAmount.toFixed(0, (_groupSeparator = {\n    groupSeparator: ','\n  }) !== null && _groupSeparator !== void 0 ? _groupSeparator : '-'), \" UNI\")), /*#__PURE__*/React.createElement(Break, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"md\",\n    style: {\n      padding: '1rem',\n      paddingTop: '0'\n    },\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.subHeader, {\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, \"Enter an address to trigger a UNI claim. If the address has any claimable UNI it will be sent to them on submission.\"), /*#__PURE__*/React.createElement(AddressInputPanel, {\n    value: typed,\n    onChange: handleRecipientType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }), parsedAddress && !hasAvailableClaim && /*#__PURE__*/React.createElement(TYPE.error, {\n    error: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, \"Address has no available claim\"), /*#__PURE__*/React.createElement(ButtonPrimary, {\n    disabled: !isAddress(parsedAddress !== null && parsedAddress !== void 0 ? parsedAddress : '') || !hasAvailableClaim,\n    padding: \"16px 16px\",\n    width: \"100%\",\n    borderRadius: \"12px\",\n    mt: \"1rem\",\n    onClick: onClaim,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"Claim UNI\"))), (attempting || claimConfirmed) && /*#__PURE__*/React.createElement(ConfirmOrLoadingWrapper, {\n    activeBG: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardNoise, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardBGImageSmaller, {\n    desaturate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CloseIcon, {\n    onClick: wrappedOnDismiss,\n    style: {\n      zIndex: 99\n    },\n    stroke: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(ConfirmedIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, !claimConfirmed ? /*#__PURE__*/React.createElement(CustomLightSpinner, {\n    src: Circle,\n    alt: \"loader\",\n    size: '90px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(UniTokenAnimated, {\n    width: \"72px\",\n    src: tokenLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"100px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    fontWeight: 600,\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }, claimConfirmed ? 'Claimed' : 'Claiming'), !claimConfirmed && /*#__PURE__*/React.createElement(Text, {\n    fontSize: 36,\n    color: '#ff007a',\n    fontWeight: 800,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, unclaimedAmount === null || unclaimedAmount === void 0 ? void 0 : unclaimedAmount.toFixed(0, (_groupSeparator2 = {\n    groupSeparator: ','\n  }) !== null && _groupSeparator2 !== void 0 ? _groupSeparator2 : '-'), \" UNI\"), parsedAddress && /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    fontWeight: 600,\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }, \"for \", shortenAddress(parsedAddress))), claimConfirmed && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TYPE.subHeader, {\n    fontWeight: 500,\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"party-hat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 19\n    }\n  }, \"\\uD83C\\uDF89\", ' '), \"Welcome to team Unicorn :)\", ' ', /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"party-hat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }\n  }, \"\\uD83C\\uDF89\"))), attempting && !hash && /*#__PURE__*/React.createElement(TYPE.subHeader, {\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  }, \"Confirm this transaction in your wallet\"), attempting && hash && !claimConfirmed && chainId && hash && /*#__PURE__*/React.createElement(ExternalLink, {\n    href: getEtherscanLink(chainId, hash, 'transaction'),\n    style: {\n      zIndex: 99\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 15\n    }\n  }, \"View transaction on Etherscan\"))));\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/uniswap-interface-main/src/components/claim/AddressClaimModal.tsx"],"names":["React","useState","Modal","AutoColumn","ColumnCenter","styled","DataCard","CardSection","Break","RowBetween","TYPE","ExternalLink","CloseIcon","CustomLightSpinner","UniTokenAnimated","ButtonPrimary","useClaimCallback","useUserUnclaimedAmount","useUserHasAvailableClaim","tokenLogo","Text","AddressInputPanel","useENS","useActiveWeb3React","isAddress","Confetti","CardNoise","CardBGImage","CardBGImageSmaller","useIsTransactionPending","getEtherscanLink","shortenAddress","ContentWrapper","ModalUpper","ConfirmOrLoadingWrapper","div","activeBG","ConfirmedIcon","AddressClaimModal","isOpen","onDismiss","chainId","typed","setTyped","handleRecipientType","val","address","parsedAddress","attempting","setAttempting","claimCallback","unclaimedAmount","hasAvailableClaim","hash","setHash","claimPending","claimConfirmed","onClaim","then","catch","error","console","log","wrappedOnDismiss","undefined","Boolean","zIndex","toFixed","groupSeparator","padding","paddingTop","Circle"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Modal from '../Modal'\nimport { AutoColumn, ColumnCenter } from '../Column'\nimport styled from 'styled-components'\nimport { DataCard, CardSection, Break } from '../earn/styled'\nimport { RowBetween } from '../Row'\nimport { TYPE, ExternalLink, CloseIcon, CustomLightSpinner, UniTokenAnimated } from '../../theme'\nimport { ButtonPrimary } from '../Button'\nimport { useClaimCallback, useUserUnclaimedAmount, useUserHasAvailableClaim } from '../../state/claim/hooks'\nimport tokenLogo from '../../assets/images/token-logo.png'\nimport Circle from '../../assets/images/blue-loader.svg'\nimport { Text } from 'rebass'\nimport AddressInputPanel from '../AddressInputPanel'\nimport useENS from '../../hooks/useENS'\nimport { useActiveWeb3React } from '../../hooks'\nimport { isAddress } from 'ethers/lib/utils'\nimport Confetti from '../Confetti'\nimport { CardNoise, CardBGImage, CardBGImageSmaller } from '../earn/styled'\nimport { useIsTransactionPending } from '../../state/transactions/hooks'\nimport { TokenAmount } from '@uniswap/sdk'\nimport { getEtherscanLink, shortenAddress } from '../../utils'\n\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n`\n\nconst ModalUpper = styled(DataCard)`\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #ff007a 0%, #021d43 100%);\n`\n\nconst ConfirmOrLoadingWrapper = styled.div<{ activeBG: boolean }>`\n  width: 100%;\n  padding: 24px;\n  position: relative;\n  background: ${({ activeBG }) =>\n    activeBG &&\n    'radial-gradient(76.02% 75.41% at 1.84% 0%, rgba(255, 0, 122, 0.2) 0%, rgba(33, 114, 229, 0.2) 100%), #FFFFFF;'};\n`\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 60px 0;\n`\n\nexport default function AddressClaimModal({ isOpen, onDismiss }: { isOpen: boolean; onDismiss: () => void }) {\n  const { chainId } = useActiveWeb3React()\n\n  // state for smart contract input\n  const [typed, setTyped] = useState('')\n  function handleRecipientType(val: string) {\n    setTyped(val)\n  }\n\n  // monitor for third party recipient of claim\n  const { address: parsedAddress } = useENS(typed)\n\n  // used for UI loading states\n  const [attempting, setAttempting] = useState<boolean>(false)\n\n  // monitor the status of the claim from contracts and txns\n  const { claimCallback } = useClaimCallback(parsedAddress)\n  const unclaimedAmount: TokenAmount | undefined = useUserUnclaimedAmount(parsedAddress)\n\n  // check if the user has something available\n  const hasAvailableClaim = useUserHasAvailableClaim(parsedAddress)\n\n  const [hash, setHash] = useState<string | undefined>()\n\n  // monitor the status of the claim from contracts and txns\n  const claimPending = useIsTransactionPending(hash ?? '')\n  const claimConfirmed = hash && !claimPending\n\n  // use the hash to monitor this txn\n\n  function onClaim() {\n    setAttempting(true)\n    claimCallback()\n      .then(hash => {\n        setHash(hash)\n      })\n      // reset modal and log error\n      .catch(error => {\n        setAttempting(false)\n        console.log(error)\n      })\n  }\n\n  function wrappedOnDismiss() {\n    setAttempting(false)\n    setHash(undefined)\n    setTyped('')\n    onDismiss()\n  }\n\n  return (\n    <Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\n      <Confetti start={Boolean(isOpen && claimConfirmed && attempting)} />\n      {!attempting && (\n        <ContentWrapper gap=\"lg\">\n          <ModalUpper>\n            <CardBGImage />\n            <CardNoise />\n            <CardSection gap=\"md\">\n              <RowBetween>\n                <TYPE.white fontWeight={500}>Claim UNI Token</TYPE.white>\n                <CloseIcon onClick={wrappedOnDismiss} style={{ zIndex: 99 }} stroke=\"white\" />\n              </RowBetween>\n              <TYPE.white fontWeight={700} fontSize={36}>\n                {unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} UNI\n              </TYPE.white>\n            </CardSection>\n            <Break />\n          </ModalUpper>\n          <AutoColumn gap=\"md\" style={{ padding: '1rem', paddingTop: '0' }} justify=\"center\">\n            <TYPE.subHeader fontWeight={500}>\n              Enter an address to trigger a UNI claim. If the address has any claimable UNI it will be sent to them on\n              submission.\n            </TYPE.subHeader>\n            <AddressInputPanel value={typed} onChange={handleRecipientType} />\n            {parsedAddress && !hasAvailableClaim && (\n              <TYPE.error error={true}>Address has no available claim</TYPE.error>\n            )}\n            <ButtonPrimary\n              disabled={!isAddress(parsedAddress ?? '') || !hasAvailableClaim}\n              padding=\"16px 16px\"\n              width=\"100%\"\n              borderRadius=\"12px\"\n              mt=\"1rem\"\n              onClick={onClaim}\n            >\n              Claim UNI\n            </ButtonPrimary>\n          </AutoColumn>\n        </ContentWrapper>\n      )}\n      {(attempting || claimConfirmed) && (\n        <ConfirmOrLoadingWrapper activeBG={true}>\n          <CardNoise />\n          <CardBGImageSmaller desaturate />\n          <RowBetween>\n            <div />\n            <CloseIcon onClick={wrappedOnDismiss} style={{ zIndex: 99 }} stroke=\"black\" />\n          </RowBetween>\n          <ConfirmedIcon>\n            {!claimConfirmed ? (\n              <CustomLightSpinner src={Circle} alt=\"loader\" size={'90px'} />\n            ) : (\n              <UniTokenAnimated width=\"72px\" src={tokenLogo} />\n            )}\n          </ConfirmedIcon>\n          <AutoColumn gap=\"100px\" justify={'center'}>\n            <AutoColumn gap=\"12px\" justify={'center'}>\n              <TYPE.largeHeader fontWeight={600} color=\"black\">\n                {claimConfirmed ? 'Claimed' : 'Claiming'}\n              </TYPE.largeHeader>\n              {!claimConfirmed && (\n                <Text fontSize={36} color={'#ff007a'} fontWeight={800}>\n                  {unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} UNI\n                </Text>\n              )}\n              {parsedAddress && (\n                <TYPE.largeHeader fontWeight={600} color=\"black\">\n                  for {shortenAddress(parsedAddress)}\n                </TYPE.largeHeader>\n              )}\n            </AutoColumn>\n            {claimConfirmed && (\n              <>\n                <TYPE.subHeader fontWeight={500} color=\"black\">\n                  <span role=\"img\" aria-label=\"party-hat\">\n                    🎉{' '}\n                  </span>\n                  Welcome to team Unicorn :){' '}\n                  <span role=\"img\" aria-label=\"party-hat\">\n                    🎉\n                  </span>\n                </TYPE.subHeader>\n              </>\n            )}\n            {attempting && !hash && (\n              <TYPE.subHeader color=\"black\">Confirm this transaction in your wallet</TYPE.subHeader>\n            )}\n            {attempting && hash && !claimConfirmed && chainId && hash && (\n              <ExternalLink href={getEtherscanLink(chainId, hash, 'transaction')} style={{ zIndex: 99 }}>\n                View transaction on Etherscan\n              </ExternalLink>\n            )}\n          </AutoColumn>\n        </ConfirmOrLoadingWrapper>\n      )}\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}