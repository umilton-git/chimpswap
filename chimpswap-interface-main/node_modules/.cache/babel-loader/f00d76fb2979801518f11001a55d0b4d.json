{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ulyss\\\\chimpswap\\\\chimpswap-interface-main\\\\src\\\\components\\\\earn\\\\ClaimRewardModal.tsx\";\nimport React, { useState } from 'react';\nimport Modal from '../Modal';\nimport { AutoColumn } from '../Column';\nimport styled from 'styled-components';\nimport { RowBetween } from '../Row';\nimport { TYPE, CloseIcon } from '../../theme';\nimport { ButtonError } from '../Button';\nimport { useStakingContract } from '../../hooks/useContract';\nimport { SubmittedView, LoadingView } from '../ModalViews';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport { useActiveWeb3React } from '../../hooks';\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 1rem;\n`;\nexport default function ClaimRewardModal({\n  isOpen,\n  onDismiss,\n  stakingInfo\n}) {\n  var _stakingInfo$earnedAm, _error2, _stakingInfo$earnedAm2;\n\n  const {\n    account\n  } = useActiveWeb3React(); // monitor call to help UI loading state\n\n  const addTransaction = useTransactionAdder();\n  const [hash, setHash] = useState();\n  const [attempting, setAttempting] = useState(false);\n\n  function wrappedOnDismiss() {\n    setHash(undefined);\n    setAttempting(false);\n    onDismiss();\n  }\n\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress);\n\n  async function onClaimReward() {\n    if (stakingContract && (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n      setAttempting(true);\n      await stakingContract.getReward({\n        gasLimit: 350000\n      }).then(response => {\n        addTransaction(response, {\n          summary: `Claim accumulated UNI rewards`\n        });\n        setHash(response.hash);\n      }).catch(error => {\n        setAttempting(false);\n        console.log(error);\n      });\n    }\n  }\n\n  let error;\n\n  if (!account) {\n    error = 'Connect Wallet';\n  }\n\n  if (!(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : 'Enter an amount';\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpen,\n    onDismiss: wrappedOnDismiss,\n    maxHeight: 90,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, !attempting && !hash && /*#__PURE__*/React.createElement(ContentWrapper, {\n    gap: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.mediumHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"Claim\"), /*#__PURE__*/React.createElement(CloseIcon, {\n    onClick: wrappedOnDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  })), (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.earnedAmount) && /*#__PURE__*/React.createElement(AutoColumn, {\n    justify: \"center\",\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    fontWeight: 600,\n    fontSize: 36,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }, stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm === void 0 ? void 0 : _stakingInfo$earnedAm.toSignificant(6)), /*#__PURE__*/React.createElement(TYPE.body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, \"Unclaimed UNI\")), /*#__PURE__*/React.createElement(TYPE.subHeader, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"When you claim without withdrawing your liquidity remains in the mining pool.\"), /*#__PURE__*/React.createElement(ButtonError, {\n    disabled: !!error,\n    error: !!error && !!(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount),\n    onClick: onClaimReward,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, (_error2 = error) !== null && _error2 !== void 0 ? _error2 : 'Claim')), attempting && !hash && /*#__PURE__*/React.createElement(LoadingView, {\n    onDismiss: wrappedOnDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, \"Claiming \", stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm2 = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm2 === void 0 ? void 0 : _stakingInfo$earnedAm2.toSignificant(6), \" UNI\"))), hash && /*#__PURE__*/React.createElement(SubmittedView, {\n    onDismiss: wrappedOnDismiss,\n    hash: hash,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, \"Transaction Submitted\"), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, \"Claimed UNI!\"))));\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/chimpswap-interface-main/src/components/earn/ClaimRewardModal.tsx"],"names":["React","useState","Modal","AutoColumn","styled","RowBetween","TYPE","CloseIcon","ButtonError","useStakingContract","SubmittedView","LoadingView","useTransactionAdder","useActiveWeb3React","ContentWrapper","ClaimRewardModal","isOpen","onDismiss","stakingInfo","account","addTransaction","hash","setHash","attempting","setAttempting","wrappedOnDismiss","undefined","stakingContract","stakingRewardAddress","onClaimReward","stakedAmount","getReward","gasLimit","then","response","summary","catch","error","console","log","earnedAmount","toSignificant","textAlign"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Modal from '../Modal'\nimport { AutoColumn } from '../Column'\nimport styled from 'styled-components'\nimport { RowBetween } from '../Row'\nimport { TYPE, CloseIcon } from '../../theme'\nimport { ButtonError } from '../Button'\nimport { StakingInfo } from '../../state/stake/hooks'\nimport { useStakingContract } from '../../hooks/useContract'\nimport { SubmittedView, LoadingView } from '../ModalViews'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { useActiveWeb3React } from '../../hooks'\n\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 1rem;\n`\n\ninterface StakingModalProps {\n  isOpen: boolean\n  onDismiss: () => void\n  stakingInfo: StakingInfo\n}\n\nexport default function ClaimRewardModal({ isOpen, onDismiss, stakingInfo }: StakingModalProps) {\n  const { account } = useActiveWeb3React()\n\n  // monitor call to help UI loading state\n  const addTransaction = useTransactionAdder()\n  const [hash, setHash] = useState<string | undefined>()\n  const [attempting, setAttempting] = useState(false)\n\n  function wrappedOnDismiss() {\n    setHash(undefined)\n    setAttempting(false)\n    onDismiss()\n  }\n\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress)\n\n  async function onClaimReward() {\n    if (stakingContract && stakingInfo?.stakedAmount) {\n      setAttempting(true)\n      await stakingContract\n        .getReward({ gasLimit: 350000 })\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: `Claim accumulated UNI rewards`\n          })\n          setHash(response.hash)\n        })\n        .catch((error: any) => {\n          setAttempting(false)\n          console.log(error)\n        })\n    }\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = 'Connect Wallet'\n  }\n  if (!stakingInfo?.stakedAmount) {\n    error = error ?? 'Enter an amount'\n  }\n\n  return (\n    <Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\n      {!attempting && !hash && (\n        <ContentWrapper gap=\"lg\">\n          <RowBetween>\n            <TYPE.mediumHeader>Claim</TYPE.mediumHeader>\n            <CloseIcon onClick={wrappedOnDismiss} />\n          </RowBetween>\n          {stakingInfo?.earnedAmount && (\n            <AutoColumn justify=\"center\" gap=\"md\">\n              <TYPE.body fontWeight={600} fontSize={36}>\n                {stakingInfo?.earnedAmount?.toSignificant(6)}\n              </TYPE.body>\n              <TYPE.body>Unclaimed UNI</TYPE.body>\n            </AutoColumn>\n          )}\n          <TYPE.subHeader style={{ textAlign: 'center' }}>\n            When you claim without withdrawing your liquidity remains in the mining pool.\n          </TYPE.subHeader>\n          <ButtonError disabled={!!error} error={!!error && !!stakingInfo?.stakedAmount} onClick={onClaimReward}>\n            {error ?? 'Claim'}\n          </ButtonError>\n        </ContentWrapper>\n      )}\n      {attempting && !hash && (\n        <LoadingView onDismiss={wrappedOnDismiss}>\n          <AutoColumn gap=\"12px\" justify={'center'}>\n            <TYPE.body fontSize={20}>Claiming {stakingInfo?.earnedAmount?.toSignificant(6)} UNI</TYPE.body>\n          </AutoColumn>\n        </LoadingView>\n      )}\n      {hash && (\n        <SubmittedView onDismiss={wrappedOnDismiss} hash={hash}>\n          <AutoColumn gap=\"12px\" justify={'center'}>\n            <TYPE.largeHeader>Transaction Submitted</TYPE.largeHeader>\n            <TYPE.body fontSize={20}>Claimed UNI!</TYPE.body>\n          </AutoColumn>\n        </SubmittedView>\n      )}\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}