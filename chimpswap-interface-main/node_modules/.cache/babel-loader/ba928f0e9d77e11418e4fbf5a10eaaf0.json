{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ulyss\\\\chimpswap\\\\uniswap-interface-main\\\\src\\\\components\\\\vote\\\\DelegateModal.tsx\";\nimport React, { useState } from 'react';\nimport Modal from '../Modal';\nimport { AutoColumn } from '../Column';\nimport styled from 'styled-components';\nimport { RowBetween } from '../Row';\nimport { TYPE } from '../../theme';\nimport { X } from 'react-feather';\nimport { ButtonPrimary } from '../Button';\nimport { useActiveWeb3React } from '../../hooks';\nimport AddressInputPanel from '../AddressInputPanel';\nimport { isAddress } from 'ethers/lib/utils';\nimport useENS from '../../hooks/useENS';\nimport { useDelegateCallback } from '../../state/governance/hooks';\nimport { useTokenBalance } from '../../state/wallet/hooks';\nimport { UNI } from '../../constants';\nimport { LoadingView, SubmittedView } from '../ModalViews';\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 24px;\n`;\nconst StyledClosed = styled(X)`\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst TextButton = styled.div`\n  :hover {\n    cursor: pointer;\n  }\n`;\nexport default function DelegateModal({\n  isOpen,\n  onDismiss,\n  title\n}) {\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React(); // state for delegate input\n\n  const [usingDelegate, setUsingDelegate] = useState(false);\n  const [typed, setTyped] = useState('');\n\n  function handleRecipientType(val) {\n    setTyped(val);\n  } // monitor for self delegation or input for third part delegate\n  // default is self delegation\n\n\n  const activeDelegate = usingDelegate ? typed : account;\n  const {\n    address: parsedAddress\n  } = useENS(activeDelegate); // get the number of votes available to delegate\n\n  const uniBalance = useTokenBalance(account !== null && account !== void 0 ? account : undefined, chainId ? UNI[chainId] : undefined);\n  const delegateCallback = useDelegateCallback(); // monitor call to help UI loading state\n\n  const [hash, setHash] = useState();\n  const [attempting, setAttempting] = useState(false); // wrapper to reset state on modal close\n\n  function wrappedOndismiss() {\n    setHash(undefined);\n    setAttempting(false);\n    onDismiss();\n  }\n\n  async function onDelegate() {\n    var _delegateCallback;\n\n    setAttempting(true); // if callback not returned properly ignore\n\n    if (!delegateCallback) return; // try delegation and store hash\n\n    const hash = await ((_delegateCallback = delegateCallback(parsedAddress !== null && parsedAddress !== void 0 ? parsedAddress : undefined)) === null || _delegateCallback === void 0 ? void 0 : _delegateCallback.catch(error => {\n      setAttempting(false);\n      console.log(error);\n    }));\n\n    if (hash) {\n      setHash(hash);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpen,\n    onDismiss: wrappedOndismiss,\n    maxHeight: 90,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, !attempting && !hash && /*#__PURE__*/React.createElement(ContentWrapper, {\n    gap: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"lg\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.mediumHeader, {\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, title), /*#__PURE__*/React.createElement(StyledClosed, {\n    stroke: \"black\",\n    onClick: wrappedOndismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(TYPE.body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, \"Earned UNI tokens represent voting shares in Uniswap governance.\"), /*#__PURE__*/React.createElement(TYPE.body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"You can either vote on each proposal yourself or delegate your votes to a third party.\"), usingDelegate && /*#__PURE__*/React.createElement(AddressInputPanel, {\n    value: typed,\n    onChange: handleRecipientType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(ButtonPrimary, {\n    disabled: !isAddress(parsedAddress !== null && parsedAddress !== void 0 ? parsedAddress : ''),\n    onClick: onDelegate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.mediumHeader, {\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }, usingDelegate ? 'Delegate Votes' : 'Self Delegate')), /*#__PURE__*/React.createElement(TextButton, {\n    onClick: () => setUsingDelegate(!usingDelegate),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.blue, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }, usingDelegate ? 'Remove' : 'Add', \" Delegate \", !usingDelegate && '+')))), attempting && !hash && /*#__PURE__*/React.createElement(LoadingView, {\n    onDismiss: wrappedOndismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, usingDelegate ? 'Delegating votes' : 'Unlocking Votes'), /*#__PURE__*/React.createElement(TYPE.main, {\n    fontSize: 36,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, uniBalance === null || uniBalance === void 0 ? void 0 : uniBalance.toSignificant(4)))), hash && /*#__PURE__*/React.createElement(SubmittedView, {\n    onDismiss: wrappedOndismiss,\n    hash: hash,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, \"Transaction Submitted\"), /*#__PURE__*/React.createElement(TYPE.main, {\n    fontSize: 36,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, uniBalance === null || uniBalance === void 0 ? void 0 : uniBalance.toSignificant(4)))));\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/uniswap-interface-main/src/components/vote/DelegateModal.tsx"],"names":["React","useState","Modal","AutoColumn","styled","RowBetween","TYPE","X","ButtonPrimary","useActiveWeb3React","AddressInputPanel","isAddress","useENS","useDelegateCallback","useTokenBalance","UNI","LoadingView","SubmittedView","ContentWrapper","StyledClosed","TextButton","div","DelegateModal","isOpen","onDismiss","title","account","chainId","usingDelegate","setUsingDelegate","typed","setTyped","handleRecipientType","val","activeDelegate","address","parsedAddress","uniBalance","undefined","delegateCallback","hash","setHash","attempting","setAttempting","wrappedOndismiss","onDelegate","catch","error","console","log","toSignificant"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport Modal from '../Modal'\nimport { AutoColumn } from '../Column'\nimport styled from 'styled-components'\nimport { RowBetween } from '../Row'\nimport { TYPE } from '../../theme'\nimport { X } from 'react-feather'\nimport { ButtonPrimary } from '../Button'\nimport { useActiveWeb3React } from '../../hooks'\nimport AddressInputPanel from '../AddressInputPanel'\nimport { isAddress } from 'ethers/lib/utils'\nimport useENS from '../../hooks/useENS'\nimport { useDelegateCallback } from '../../state/governance/hooks'\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport { UNI } from '../../constants'\nimport { LoadingView, SubmittedView } from '../ModalViews'\n\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 24px;\n`\n\nconst StyledClosed = styled(X)`\n  :hover {\n    cursor: pointer;\n  }\n`\n\nconst TextButton = styled.div`\n  :hover {\n    cursor: pointer;\n  }\n`\n\ninterface VoteModalProps {\n  isOpen: boolean\n  onDismiss: () => void\n  title: string\n}\n\nexport default function DelegateModal({ isOpen, onDismiss, title }: VoteModalProps) {\n  const { account, chainId } = useActiveWeb3React()\n\n  // state for delegate input\n  const [usingDelegate, setUsingDelegate] = useState(false)\n  const [typed, setTyped] = useState('')\n  function handleRecipientType(val: string) {\n    setTyped(val)\n  }\n\n  // monitor for self delegation or input for third part delegate\n  // default is self delegation\n  const activeDelegate = usingDelegate ? typed : account\n  const { address: parsedAddress } = useENS(activeDelegate)\n\n  // get the number of votes available to delegate\n  const uniBalance = useTokenBalance(account ?? undefined, chainId ? UNI[chainId] : undefined)\n\n  const delegateCallback = useDelegateCallback()\n\n  // monitor call to help UI loading state\n  const [hash, setHash] = useState<string | undefined>()\n  const [attempting, setAttempting] = useState(false)\n\n  // wrapper to reset state on modal close\n  function wrappedOndismiss() {\n    setHash(undefined)\n    setAttempting(false)\n    onDismiss()\n  }\n\n  async function onDelegate() {\n    setAttempting(true)\n\n    // if callback not returned properly ignore\n    if (!delegateCallback) return\n\n    // try delegation and store hash\n    const hash = await delegateCallback(parsedAddress ?? undefined)?.catch(error => {\n      setAttempting(false)\n      console.log(error)\n    })\n\n    if (hash) {\n      setHash(hash)\n    }\n  }\n\n  return (\n    <Modal isOpen={isOpen} onDismiss={wrappedOndismiss} maxHeight={90}>\n      {!attempting && !hash && (\n        <ContentWrapper gap=\"lg\">\n          <AutoColumn gap=\"lg\" justify=\"center\">\n            <RowBetween>\n              <TYPE.mediumHeader fontWeight={500}>{title}</TYPE.mediumHeader>\n              <StyledClosed stroke=\"black\" onClick={wrappedOndismiss} />\n            </RowBetween>\n            <TYPE.body>Earned UNI tokens represent voting shares in Uniswap governance.</TYPE.body>\n            <TYPE.body>\n              You can either vote on each proposal yourself or delegate your votes to a third party.\n            </TYPE.body>\n            {usingDelegate && <AddressInputPanel value={typed} onChange={handleRecipientType} />}\n            <ButtonPrimary disabled={!isAddress(parsedAddress ?? '')} onClick={onDelegate}>\n              <TYPE.mediumHeader color=\"white\">{usingDelegate ? 'Delegate Votes' : 'Self Delegate'}</TYPE.mediumHeader>\n            </ButtonPrimary>\n            <TextButton onClick={() => setUsingDelegate(!usingDelegate)}>\n              <TYPE.blue>\n                {usingDelegate ? 'Remove' : 'Add'} Delegate {!usingDelegate && '+'}\n              </TYPE.blue>\n            </TextButton>\n          </AutoColumn>\n        </ContentWrapper>\n      )}\n      {attempting && !hash && (\n        <LoadingView onDismiss={wrappedOndismiss}>\n          <AutoColumn gap=\"12px\" justify={'center'}>\n            <TYPE.largeHeader>{usingDelegate ? 'Delegating votes' : 'Unlocking Votes'}</TYPE.largeHeader>\n            <TYPE.main fontSize={36}>{uniBalance?.toSignificant(4)}</TYPE.main>\n          </AutoColumn>\n        </LoadingView>\n      )}\n      {hash && (\n        <SubmittedView onDismiss={wrappedOndismiss} hash={hash}>\n          <AutoColumn gap=\"12px\" justify={'center'}>\n            <TYPE.largeHeader>Transaction Submitted</TYPE.largeHeader>\n            <TYPE.main fontSize={36}>{uniBalance?.toSignificant(4)}</TYPE.main>\n          </AutoColumn>\n        </SubmittedView>\n      )}\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}