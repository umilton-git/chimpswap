{"ast":null,"code":"import { ChainId } from '@uniswap/sdk';\nimport { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector';\nexport const OVERLAY_READY = 'OVERLAY_READY';\nconst CHAIN_ID_NETWORK_ARGUMENT = {\n  [ChainId.MAINNET]: undefined,\n  [ChainId.ROPSTEN]: 'ropsten',\n  [ChainId.RINKEBY]: 'rinkeby',\n  [ChainId.KOVAN]: 'kovan'\n};\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const {\n        default: Fortmatic\n      } = await import('fortmatic');\n      const {\n        apiKey,\n        chainId\n      } = this;\n\n      if (chainId in CHAIN_ID_NETWORK_ARGUMENT) {\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId]);\n      } else {\n        throw new Error(`Unsupported network ID: ${chainId}`);\n      }\n    }\n\n    const provider = this.fortmatic.getProvider();\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval);\n          this.emit(OVERLAY_READY);\n          resolve();\n        }\n      }, 200);\n    });\n    const [account] = await Promise.all([provider.enable().then(accounts => accounts[0]), pollForOverlayReady]);\n    return {\n      provider: this.fortmatic.getProvider(),\n      chainId: this.chainId,\n      account\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/uniswap-interface-main/src/connectors/Fortmatic.ts"],"names":["ChainId","FortmaticConnector","FortmaticConnectorCore","OVERLAY_READY","CHAIN_ID_NETWORK_ARGUMENT","MAINNET","undefined","ROPSTEN","RINKEBY","KOVAN","activate","fortmatic","default","Fortmatic","apiKey","chainId","Error","provider","getProvider","pollForOverlayReady","Promise","resolve","interval","setInterval","overlayReady","clearInterval","emit","account","all","enable","then","accounts"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAkB,IAAIC,sBAA/B,QAA6D,iCAA7D;AAEA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AAIP,MAAMC,yBAAgG,GAAG;AACvG,GAACJ,OAAO,CAACK,OAAT,GAAmBC,SADoF;AAEvG,GAACN,OAAO,CAACO,OAAT,GAAmB,SAFoF;AAGvG,GAACP,OAAO,CAACQ,OAAT,GAAmB,SAHoF;AAIvG,GAACR,OAAO,CAACS,KAAT,GAAiB;AAJsF,CAAzG;AAOA,OAAO,MAAMR,kBAAN,SAAiCC,sBAAjC,CAAwD;AAC7D,QAAMQ,QAAN,GAAiB;AACf,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,YAAM;AAAEC,QAAAA,OAAO,EAAEC;AAAX,UAAyB,MAAM,OAAO,WAAP,CAArC;AAEA,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAsB,IAA5B;;AACA,UAAIA,OAAO,IAAIX,yBAAf,EAA0C;AACxC,aAAKO,SAAL,GAAiB,IAAIE,SAAJ,CAAcC,MAAd,EAAsBV,yBAAyB,CAACW,OAAD,CAA/C,CAAjB;AACD,OAFD,MAEO;AACL,cAAM,IAAIC,KAAJ,CAAW,2BAA0BD,OAAQ,EAA7C,CAAN;AACD;AACF;;AAED,UAAME,QAAQ,GAAG,KAAKN,SAAL,CAAeO,WAAf,EAAjB;AAEA,UAAMC,mBAAmB,GAAG,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACjD,YAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAIN,QAAQ,CAACO,YAAb,EAA2B;AACzBC,UAAAA,aAAa,CAACH,QAAD,CAAb;AACA,eAAKI,IAAL,CAAUvB,aAAV;AACAkB,UAAAA,OAAO;AACR;AACF,OAN2B,EAMzB,GANyB,CAA5B;AAOD,KAR2B,CAA5B;AAUA,UAAM,CAACM,OAAD,IAAY,MAAMP,OAAO,CAACQ,GAAR,CAAY,CAClCX,QAAQ,CAACY,MAAT,GAAkBC,IAAlB,CAAwBC,QAAD,IAAwBA,QAAQ,CAAC,CAAD,CAAvD,CADkC,EAElCZ,mBAFkC,CAAZ,CAAxB;AAKA,WAAO;AAAEF,MAAAA,QAAQ,EAAE,KAAKN,SAAL,CAAeO,WAAf,EAAZ;AAA0CH,MAAAA,OAAO,EAAG,IAAD,CAAcA,OAAjE;AAA0EY,MAAAA;AAA1E,KAAP;AACD;;AA/B4D","sourcesContent":["import { ChainId } from '@uniswap/sdk'\nimport { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector'\n\nexport const OVERLAY_READY = 'OVERLAY_READY'\n\ntype FormaticSupportedChains = Extract<ChainId, ChainId.MAINNET | ChainId.ROPSTEN | ChainId.RINKEBY | ChainId.KOVAN>\n\nconst CHAIN_ID_NETWORK_ARGUMENT: { readonly [chainId in FormaticSupportedChains]: string | undefined } = {\n  [ChainId.MAINNET]: undefined,\n  [ChainId.ROPSTEN]: 'ropsten',\n  [ChainId.RINKEBY]: 'rinkeby',\n  [ChainId.KOVAN]: 'kovan'\n}\n\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const { default: Fortmatic } = await import('fortmatic')\n\n      const { apiKey, chainId } = this as any\n      if (chainId in CHAIN_ID_NETWORK_ARGUMENT) {\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId as FormaticSupportedChains])\n      } else {\n        throw new Error(`Unsupported network ID: ${chainId}`)\n      }\n    }\n\n    const provider = this.fortmatic.getProvider()\n\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval)\n          this.emit(OVERLAY_READY)\n          resolve()\n        }\n      }, 200)\n    })\n\n    const [account] = await Promise.all([\n      provider.enable().then((accounts: string[]) => accounts[0]),\n      pollForOverlayReady\n    ])\n\n    return { provider: this.fortmatic.getProvider(), chainId: (this as any).chainId, account }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}