{"ast":null,"code":"const promiseToCallback = require('promise-to-callback');\n\nmodule.exports = createAsyncMiddleware;\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return (req, res, next, end) => {\n    let nextDonePromise = null;\n    const finishedPromise = asyncMiddleware(req, res, getNextPromise);\n    promiseToCallback(finishedPromise)(err => {\n      // async middleware ended\n      if (nextDonePromise) {\n        // next handler was called - complete nextHandler\n        promiseToCallback(nextDonePromise)((nextErr, nextHandlerSignalDone) => {\n          // nextErr is only present if something went really wrong\n          // if an error is thrown after `await next()` it appears as `err` and not `nextErr`\n          if (nextErr) {\n            console.error(nextErr);\n            return end(nextErr);\n          }\n\n          nextHandlerSignalDone(err);\n        });\n      } else {\n        // next handler was not called - complete middleware\n        end(err);\n      }\n    });\n\n    async function getNextPromise() {\n      nextDonePromise = getNextDoneCallback();\n      await nextDonePromise;\n      return undefined;\n    }\n\n    function getNextDoneCallback() {\n      return new Promise(resolve => {\n        next(cb => resolve(cb));\n      });\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/uniswap-interface-main/node_modules/json-rpc-engine/src/createAsyncMiddleware.js"],"names":["promiseToCallback","require","module","exports","createAsyncMiddleware","asyncMiddleware","req","res","next","end","nextDonePromise","finishedPromise","getNextPromise","err","nextErr","nextHandlerSignalDone","console","error","getNextDoneCallback","undefined","Promise","resolve","cb"],"mappings":"AAAA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAD,CAAjC;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,qBAAjB;;AAEA,SAASA,qBAAT,CAA+BC,eAA/B,EAAgD;AAC9C,SAAO,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiBC,GAAjB,KAAyB;AAC9B,QAAIC,eAAe,GAAG,IAAtB;AACA,UAAMC,eAAe,GAAGN,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAWK,cAAX,CAAvC;AACAZ,IAAAA,iBAAiB,CAACW,eAAD,CAAjB,CAAoCE,GAAD,IAAS;AAC1C;AACA,UAAIH,eAAJ,EAAqB;AACnB;AACAV,QAAAA,iBAAiB,CAACU,eAAD,CAAjB,CAAmC,CAACI,OAAD,EAAUC,qBAAV,KAAoC;AACrE;AACA;AACA,cAAID,OAAJ,EAAa;AACXE,YAAAA,OAAO,CAACC,KAAR,CAAcH,OAAd;AACA,mBAAOL,GAAG,CAACK,OAAD,CAAV;AACD;;AACDC,UAAAA,qBAAqB,CAACF,GAAD,CAArB;AACD,SARD;AASD,OAXD,MAWO;AACL;AACAJ,QAAAA,GAAG,CAACI,GAAD,CAAH;AACD;AACF,KAjBD;;AAmBA,mBAAeD,cAAf,GAAgC;AAC9BF,MAAAA,eAAe,GAAGQ,mBAAmB,EAArC;AACA,YAAMR,eAAN;AACA,aAAOS,SAAP;AACD;;AAED,aAASD,mBAAT,GAA+B;AAC7B,aAAO,IAAIE,OAAJ,CAAaC,OAAD,IAAa;AAC9Bb,QAAAA,IAAI,CAAEc,EAAD,IAAQD,OAAO,CAACC,EAAD,CAAhB,CAAJ;AACD,OAFM,CAAP;AAGD;AACF,GAjCD;AAkCD","sourcesContent":["const promiseToCallback = require('promise-to-callback')\n\nmodule.exports = createAsyncMiddleware\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return (req, res, next, end) => {\n    let nextDonePromise = null\n    const finishedPromise = asyncMiddleware(req, res, getNextPromise)\n    promiseToCallback(finishedPromise)((err) => {\n      // async middleware ended\n      if (nextDonePromise) {\n        // next handler was called - complete nextHandler\n        promiseToCallback(nextDonePromise)((nextErr, nextHandlerSignalDone) => {\n          // nextErr is only present if something went really wrong\n          // if an error is thrown after `await next()` it appears as `err` and not `nextErr`\n          if (nextErr) {\n            console.error(nextErr)\n            return end(nextErr)\n          }\n          nextHandlerSignalDone(err)\n        })\n      } else {\n        // next handler was not called - complete middleware\n        end(err)\n      }\n    })\n\n    async function getNextPromise() {\n      nextDonePromise = getNextDoneCallback()\n      await nextDonePromise\n      return undefined\n    }\n\n    function getNextDoneCallback() {\n      return new Promise((resolve) => {\n        next((cb) => resolve(cb))\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}