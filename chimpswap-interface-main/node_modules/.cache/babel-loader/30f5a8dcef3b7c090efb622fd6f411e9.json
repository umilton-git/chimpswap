{"ast":null,"code":"// @ts-check\n'use strict';\n\nconst {\n  encodeText\n} = require('./util');\n/**\n * @typedef {Object} Codec\n * @property {function(Uint8Array):string} encode\n * @property {function(string):Uint8Array} decode\n *\n * @typedef {function(string):Codec} CodecFactory\n */\n\n\nclass Base {\n  /**\n   * @param {string} name\n   * @param {string} code\n   * @param {CodecFactory} implementation\n   * @param {string} alphabet\n   */\n  constructor(name, code, implementation, alphabet) {\n    this.name = name;\n    this.code = code;\n    this.codeBuf = encodeText(this.code);\n    this.alphabet = alphabet;\n    this.engine = implementation(alphabet);\n  }\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n\n\n  encode(buf) {\n    return this.engine.encode(buf);\n  }\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n\n\n  decode(string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`);\n      }\n    }\n\n    return this.engine.decode(string);\n  }\n\n}\n\nmodule.exports = Base;","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/chimpswap-interface-main/node_modules/multibase/src/base.js"],"names":["encodeText","require","Base","constructor","name","code","implementation","alphabet","codeBuf","engine","encode","buf","decode","string","char","indexOf","Error","module","exports"],"mappings":"AAAA;AACA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,OAAO,CAAC,QAAD,CAA9B;AAEA;;;;;;;;;AAQA,MAAMC,IAAN,CAAW;AACT;;;;;;AAMAC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,IAAR,EAAcC,cAAd,EAA8BC,QAA9B,EAAwC;AACjD,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKG,OAAL,GAAeR,UAAU,CAAC,KAAKK,IAAN,CAAzB;AACA,SAAKE,QAAL,GAAgBA,QAAhB;AACA,SAAKE,MAAL,GAAcH,cAAc,CAACC,QAAD,CAA5B;AACD;AAED;;;;;;AAIAG,EAAAA,MAAM,CAAEC,GAAF,EAAO;AACX,WAAO,KAAKF,MAAL,CAAYC,MAAZ,CAAmBC,GAAnB,CAAP;AACD;AAED;;;;;;AAIAC,EAAAA,MAAM,CAAEC,MAAF,EAAU;AACd,SAAK,MAAMC,IAAX,IAAmBD,MAAnB,EAA2B;AACzB,UAAI,KAAKN,QAAL,IAAiB,KAAKA,QAAL,CAAcQ,OAAd,CAAsBD,IAAtB,IAA8B,CAAnD,EAAsD;AACpD,cAAM,IAAIE,KAAJ,CAAW,sBAAqBF,IAAK,SAAQD,MAAO,GAApD,CAAN;AACD;AACF;;AACD,WAAO,KAAKJ,MAAL,CAAYG,MAAZ,CAAmBC,MAAnB,CAAP;AACD;;AAlCQ;;AAqCXI,MAAM,CAACC,OAAP,GAAiBhB,IAAjB","sourcesContent":["// @ts-check\n'use strict'\n\nconst { encodeText } = require('./util')\n\n/**\n * @typedef {Object} Codec\n * @property {function(Uint8Array):string} encode\n * @property {function(string):Uint8Array} decode\n *\n * @typedef {function(string):Codec} CodecFactory\n */\n\nclass Base {\n  /**\n   * @param {string} name\n   * @param {string} code\n   * @param {CodecFactory} implementation\n   * @param {string} alphabet\n   */\n  constructor (name, code, implementation, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.engine = implementation(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.engine.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.engine.decode(string)\n  }\n}\n\nmodule.exports = Base\n"]},"metadata":{},"sourceType":"script"}