{"ast":null,"code":"import { INITIAL_ALLOWED_SLIPPAGE, DEFAULT_DEADLINE_FROM_NOW } from '../../constants';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { updateVersion } from '../global/actions';\nimport { addSerializedPair, addSerializedToken, removeSerializedPair, removeSerializedToken, updateMatchesDarkMode, updateUserDarkMode, updateUserExpertMode, updateUserSlippageTolerance, updateUserDeadline, toggleURLWarning, updateUserSingleHopOnly } from './actions';\n\nconst currentTimestamp = () => new Date().getTime();\n\nfunction pairKey(token0Address, token1Address) {\n  return `${token0Address};${token1Address}`;\n}\n\nexport const initialState = {\n  userDarkMode: null,\n  matchesDarkMode: false,\n  userExpertMode: false,\n  userSingleHopOnly: false,\n  userSlippageTolerance: INITIAL_ALLOWED_SLIPPAGE,\n  userDeadline: DEFAULT_DEADLINE_FROM_NOW,\n  tokens: {},\n  pairs: {},\n  timestamp: currentTimestamp(),\n  URLWarningVisible: true\n};\nexport default createReducer(initialState, builder => builder.addCase(updateVersion, state => {\n  // slippage isnt being tracked in local storage, reset to default\n  // noinspection SuspiciousTypeOfGuard\n  if (typeof state.userSlippageTolerance !== 'number') {\n    state.userSlippageTolerance = INITIAL_ALLOWED_SLIPPAGE;\n  } // deadline isnt being tracked in local storage, reset to default\n  // noinspection SuspiciousTypeOfGuard\n\n\n  if (typeof state.userDeadline !== 'number') {\n    state.userDeadline = DEFAULT_DEADLINE_FROM_NOW;\n  }\n\n  state.lastUpdateVersionTimestamp = currentTimestamp();\n}).addCase(updateUserDarkMode, (state, action) => {\n  state.userDarkMode = action.payload.userDarkMode;\n  state.timestamp = currentTimestamp();\n}).addCase(updateMatchesDarkMode, (state, action) => {\n  state.matchesDarkMode = action.payload.matchesDarkMode;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserExpertMode, (state, action) => {\n  state.userExpertMode = action.payload.userExpertMode;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserSlippageTolerance, (state, action) => {\n  state.userSlippageTolerance = action.payload.userSlippageTolerance;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserDeadline, (state, action) => {\n  state.userDeadline = action.payload.userDeadline;\n  state.timestamp = currentTimestamp();\n}).addCase(updateUserSingleHopOnly, (state, action) => {\n  state.userSingleHopOnly = action.payload.userSingleHopOnly;\n}).addCase(addSerializedToken, (state, {\n  payload: {\n    serializedToken\n  }\n}) => {\n  if (!state.tokens) {\n    state.tokens = {};\n  }\n\n  state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {};\n  state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken;\n  state.timestamp = currentTimestamp();\n}).addCase(removeSerializedToken, (state, {\n  payload: {\n    address,\n    chainId\n  }\n}) => {\n  if (!state.tokens) {\n    state.tokens = {};\n  }\n\n  state.tokens[chainId] = state.tokens[chainId] || {};\n  delete state.tokens[chainId][address];\n  state.timestamp = currentTimestamp();\n}).addCase(addSerializedPair, (state, {\n  payload: {\n    serializedPair\n  }\n}) => {\n  if (serializedPair.token0.chainId === serializedPair.token1.chainId && serializedPair.token0.address !== serializedPair.token1.address) {\n    const chainId = serializedPair.token0.chainId;\n    state.pairs[chainId] = state.pairs[chainId] || {};\n    state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair;\n  }\n\n  state.timestamp = currentTimestamp();\n}).addCase(removeSerializedPair, (state, {\n  payload: {\n    chainId,\n    tokenAAddress,\n    tokenBAddress\n  }\n}) => {\n  if (state.pairs[chainId]) {\n    // just delete both keys if either exists\n    delete state.pairs[chainId][pairKey(tokenAAddress, tokenBAddress)];\n    delete state.pairs[chainId][pairKey(tokenBAddress, tokenAAddress)];\n  }\n\n  state.timestamp = currentTimestamp();\n}).addCase(toggleURLWarning, state => {\n  state.URLWarningVisible = !state.URLWarningVisible;\n}));","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/chimpswap-interface-main/src/state/user/reducer.ts"],"names":["INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","createReducer","updateVersion","addSerializedPair","addSerializedToken","removeSerializedPair","removeSerializedToken","updateMatchesDarkMode","updateUserDarkMode","updateUserExpertMode","updateUserSlippageTolerance","updateUserDeadline","toggleURLWarning","updateUserSingleHopOnly","currentTimestamp","Date","getTime","pairKey","token0Address","token1Address","initialState","userDarkMode","matchesDarkMode","userExpertMode","userSingleHopOnly","userSlippageTolerance","userDeadline","tokens","pairs","timestamp","URLWarningVisible","builder","addCase","state","lastUpdateVersionTimestamp","action","payload","serializedToken","chainId","address","serializedPair","token0","token1","tokenAAddress","tokenBAddress"],"mappings":"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","sourcesContent":["import { INITIAL_ALLOWED_SLIPPAGE, DEFAULT_DEADLINE_FROM_NOW } from '../../constants'\nimport { createReducer } from '@reduxjs/toolkit'\nimport { updateVersion } from '../global/actions'\nimport {\n  addSerializedPair,\n  addSerializedToken,\n  removeSerializedPair,\n  removeSerializedToken,\n  SerializedPair,\n  SerializedToken,\n  updateMatchesDarkMode,\n  updateUserDarkMode,\n  updateUserExpertMode,\n  updateUserSlippageTolerance,\n  updateUserDeadline,\n  toggleURLWarning,\n  updateUserSingleHopOnly\n} from './actions'\n\nconst currentTimestamp = () => new Date().getTime()\n\nexport interface UserState {\n  // the timestamp of the last updateVersion action\n  lastUpdateVersionTimestamp?: number\n\n  userDarkMode: boolean | null // the user's choice for dark mode or light mode\n  matchesDarkMode: boolean // whether the dark mode media query matches\n\n  userExpertMode: boolean\n\n  userSingleHopOnly: boolean // only allow swaps on direct pairs\n\n  // user defined slippage tolerance in bips, used in all txns\n  userSlippageTolerance: number\n\n  // deadline set by user in minutes, used in all txns\n  userDeadline: number\n\n  tokens: {\n    [chainId: number]: {\n      [address: string]: SerializedToken\n    }\n  }\n\n  pairs: {\n    [chainId: number]: {\n      // keyed by token0Address:token1Address\n      [key: string]: SerializedPair\n    }\n  }\n\n  timestamp: number\n  URLWarningVisible: boolean\n}\n\nfunction pairKey(token0Address: string, token1Address: string) {\n  return `${token0Address};${token1Address}`\n}\n\nexport const initialState: UserState = {\n  userDarkMode: null,\n  matchesDarkMode: false,\n  userExpertMode: false,\n  userSingleHopOnly: false,\n  userSlippageTolerance: INITIAL_ALLOWED_SLIPPAGE,\n  userDeadline: DEFAULT_DEADLINE_FROM_NOW,\n  tokens: {},\n  pairs: {},\n  timestamp: currentTimestamp(),\n  URLWarningVisible: true\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(updateVersion, state => {\n      // slippage isnt being tracked in local storage, reset to default\n      // noinspection SuspiciousTypeOfGuard\n      if (typeof state.userSlippageTolerance !== 'number') {\n        state.userSlippageTolerance = INITIAL_ALLOWED_SLIPPAGE\n      }\n\n      // deadline isnt being tracked in local storage, reset to default\n      // noinspection SuspiciousTypeOfGuard\n      if (typeof state.userDeadline !== 'number') {\n        state.userDeadline = DEFAULT_DEADLINE_FROM_NOW\n      }\n\n      state.lastUpdateVersionTimestamp = currentTimestamp()\n    })\n    .addCase(updateUserDarkMode, (state, action) => {\n      state.userDarkMode = action.payload.userDarkMode\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateMatchesDarkMode, (state, action) => {\n      state.matchesDarkMode = action.payload.matchesDarkMode\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserExpertMode, (state, action) => {\n      state.userExpertMode = action.payload.userExpertMode\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserSlippageTolerance, (state, action) => {\n      state.userSlippageTolerance = action.payload.userSlippageTolerance\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserDeadline, (state, action) => {\n      state.userDeadline = action.payload.userDeadline\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(updateUserSingleHopOnly, (state, action) => {\n      state.userSingleHopOnly = action.payload.userSingleHopOnly\n    })\n    .addCase(addSerializedToken, (state, { payload: { serializedToken } }) => {\n      if (!state.tokens) {\n        state.tokens = {}\n      }\n      state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {}\n      state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(removeSerializedToken, (state, { payload: { address, chainId } }) => {\n      if (!state.tokens) {\n        state.tokens = {}\n      }\n      state.tokens[chainId] = state.tokens[chainId] || {}\n      delete state.tokens[chainId][address]\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(addSerializedPair, (state, { payload: { serializedPair } }) => {\n      if (\n        serializedPair.token0.chainId === serializedPair.token1.chainId &&\n        serializedPair.token0.address !== serializedPair.token1.address\n      ) {\n        const chainId = serializedPair.token0.chainId\n        state.pairs[chainId] = state.pairs[chainId] || {}\n        state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair\n      }\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(removeSerializedPair, (state, { payload: { chainId, tokenAAddress, tokenBAddress } }) => {\n      if (state.pairs[chainId]) {\n        // just delete both keys if either exists\n        delete state.pairs[chainId][pairKey(tokenAAddress, tokenBAddress)]\n        delete state.pairs[chainId][pairKey(tokenBAddress, tokenAAddress)]\n      }\n      state.timestamp = currentTimestamp()\n    })\n    .addCase(toggleURLWarning, state => {\n      state.URLWarningVisible = !state.URLWarningVisible\n    })\n)\n"]},"metadata":{},"sourceType":"module"}