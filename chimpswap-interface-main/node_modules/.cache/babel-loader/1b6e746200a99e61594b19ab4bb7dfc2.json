{"ast":null,"code":"import { ChainId, currencyEquals, JSBI, Price, WETH } from '@uniswap/sdk';\nimport { useMemo } from 'react';\nimport { USDC } from '../constants';\nimport { PairState, usePairs } from '../data/Reserves';\nimport { useActiveWeb3React } from '../hooks';\nimport { wrappedCurrency } from './wrappedCurrency';\n/**\n * Returns the price in USDC of the input currency\n * @param currency currency to compute the USDC price of\n */\n\nexport default function useUSDCPrice(currency) {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const wrapped = wrappedCurrency(currency, chainId);\n  const tokenPairs = useMemo(() => [[chainId && wrapped && currencyEquals(WETH[chainId], wrapped) ? undefined : currency, chainId ? WETH[chainId] : undefined], [(wrapped === null || wrapped === void 0 ? void 0 : wrapped.equals(USDC)) ? undefined : wrapped, chainId === ChainId.MAINNET ? USDC : undefined], [chainId ? WETH[chainId] : undefined, chainId === ChainId.MAINNET ? USDC : undefined]], [chainId, currency, wrapped]);\n  const [[ethPairState, ethPair], [usdcPairState, usdcPair], [usdcEthPairState, usdcEthPair]] = usePairs(tokenPairs);\n  return useMemo(() => {\n    if (!currency || !wrapped || !chainId) {\n      return undefined;\n    } // handle weth/eth\n\n\n    if (wrapped.equals(WETH[chainId])) {\n      if (usdcPair) {\n        const price = usdcPair.priceOf(WETH[chainId]);\n        return new Price(currency, USDC, price.denominator, price.numerator);\n      } else {\n        return undefined;\n      }\n    } // handle usdc\n\n\n    if (wrapped.equals(USDC)) {\n      return new Price(USDC, USDC, '1', '1');\n    }\n\n    const ethPairETHAmount = ethPair === null || ethPair === void 0 ? void 0 : ethPair.reserveOf(WETH[chainId]);\n    const ethPairETHUSDCValue = ethPairETHAmount && usdcEthPair ? usdcEthPair.priceOf(WETH[chainId]).quote(ethPairETHAmount).raw : JSBI.BigInt(0); // all other tokens\n    // first try the usdc pair\n\n    if (usdcPairState === PairState.EXISTS && usdcPair && usdcPair.reserveOf(USDC).greaterThan(ethPairETHUSDCValue)) {\n      const price = usdcPair.priceOf(wrapped);\n      return new Price(currency, USDC, price.denominator, price.numerator);\n    }\n\n    if (ethPairState === PairState.EXISTS && ethPair && usdcEthPairState === PairState.EXISTS && usdcEthPair) {\n      if (usdcEthPair.reserveOf(USDC).greaterThan('0') && ethPair.reserveOf(WETH[chainId]).greaterThan('0')) {\n        const ethUsdcPrice = usdcEthPair.priceOf(USDC);\n        const currencyEthPrice = ethPair.priceOf(WETH[chainId]);\n        const usdcPrice = ethUsdcPrice.multiply(currencyEthPrice).invert();\n        return new Price(currency, USDC, usdcPrice.denominator, usdcPrice.numerator);\n      }\n    }\n\n    return undefined;\n  }, [chainId, currency, ethPair, ethPairState, usdcEthPair, usdcEthPairState, usdcPair, usdcPairState, wrapped]);\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/uniswap-interface-main/src/utils/useUSDCPrice.ts"],"names":["ChainId","currencyEquals","JSBI","Price","WETH","useMemo","USDC","PairState","usePairs","useActiveWeb3React","wrappedCurrency","useUSDCPrice","currency","chainId","wrapped","tokenPairs","undefined","equals","MAINNET","ethPairState","ethPair","usdcPairState","usdcPair","usdcEthPairState","usdcEthPair","price","priceOf","denominator","numerator","ethPairETHAmount","reserveOf","ethPairETHUSDCValue","quote","raw","BigInt","EXISTS","greaterThan","ethUsdcPrice","currencyEthPrice","usdcPrice","multiply","invert"],"mappings":"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","sourcesContent":["import { ChainId, Currency, currencyEquals, JSBI, Price, WETH } from '@uniswap/sdk'\nimport { useMemo } from 'react'\nimport { USDC } from '../constants'\nimport { PairState, usePairs } from '../data/Reserves'\nimport { useActiveWeb3React } from '../hooks'\nimport { wrappedCurrency } from './wrappedCurrency'\n\n/**\n * Returns the price in USDC of the input currency\n * @param currency currency to compute the USDC price of\n */\nexport default function useUSDCPrice(currency?: Currency): Price | undefined {\n  const { chainId } = useActiveWeb3React()\n  const wrapped = wrappedCurrency(currency, chainId)\n  const tokenPairs: [Currency | undefined, Currency | undefined][] = useMemo(\n    () => [\n      [\n        chainId && wrapped && currencyEquals(WETH[chainId], wrapped) ? undefined : currency,\n        chainId ? WETH[chainId] : undefined\n      ],\n      [wrapped?.equals(USDC) ? undefined : wrapped, chainId === ChainId.MAINNET ? USDC : undefined],\n      [chainId ? WETH[chainId] : undefined, chainId === ChainId.MAINNET ? USDC : undefined]\n    ],\n    [chainId, currency, wrapped]\n  )\n  const [[ethPairState, ethPair], [usdcPairState, usdcPair], [usdcEthPairState, usdcEthPair]] = usePairs(tokenPairs)\n\n  return useMemo(() => {\n    if (!currency || !wrapped || !chainId) {\n      return undefined\n    }\n    // handle weth/eth\n    if (wrapped.equals(WETH[chainId])) {\n      if (usdcPair) {\n        const price = usdcPair.priceOf(WETH[chainId])\n        return new Price(currency, USDC, price.denominator, price.numerator)\n      } else {\n        return undefined\n      }\n    }\n    // handle usdc\n    if (wrapped.equals(USDC)) {\n      return new Price(USDC, USDC, '1', '1')\n    }\n\n    const ethPairETHAmount = ethPair?.reserveOf(WETH[chainId])\n    const ethPairETHUSDCValue: JSBI =\n      ethPairETHAmount && usdcEthPair ? usdcEthPair.priceOf(WETH[chainId]).quote(ethPairETHAmount).raw : JSBI.BigInt(0)\n\n    // all other tokens\n    // first try the usdc pair\n    if (usdcPairState === PairState.EXISTS && usdcPair && usdcPair.reserveOf(USDC).greaterThan(ethPairETHUSDCValue)) {\n      const price = usdcPair.priceOf(wrapped)\n      return new Price(currency, USDC, price.denominator, price.numerator)\n    }\n    if (ethPairState === PairState.EXISTS && ethPair && usdcEthPairState === PairState.EXISTS && usdcEthPair) {\n      if (usdcEthPair.reserveOf(USDC).greaterThan('0') && ethPair.reserveOf(WETH[chainId]).greaterThan('0')) {\n        const ethUsdcPrice = usdcEthPair.priceOf(USDC)\n        const currencyEthPrice = ethPair.priceOf(WETH[chainId])\n        const usdcPrice = ethUsdcPrice.multiply(currencyEthPrice).invert()\n        return new Price(currency, USDC, usdcPrice.denominator, usdcPrice.numerator)\n      }\n    }\n    return undefined\n  }, [chainId, currency, ethPair, ethPairState, usdcEthPair, usdcEthPairState, usdcPair, usdcPairState, wrapped])\n}\n"]},"metadata":{},"sourceType":"module"}