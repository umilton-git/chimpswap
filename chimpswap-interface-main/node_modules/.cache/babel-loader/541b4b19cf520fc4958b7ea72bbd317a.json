{"ast":null,"code":"import { useAllLists } from 'state/lists/hooks';\nimport { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists';\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback';\nimport useInterval from '../../hooks/useInterval';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport { acceptListUpdate } from './actions';\nimport { useActiveListUrls } from './hooks';\nimport { useAllInactiveTokens } from 'hooks/Tokens';\nimport { UNSUPPORTED_LIST_URLS } from 'constants/lists';\nexport default function Updater() {\n  const {\n    library\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const isWindowVisible = useIsWindowVisible(); // get all loaded lists, and the active urls\n\n  const lists = useAllLists();\n  const activeListUrls = useActiveListUrls(); // initiate loading\n\n  useAllInactiveTokens();\n  const fetchList = useFetchListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(lists).forEach(url => fetchList(url).catch(error => console.debug('interval list fetching error', error)));\n  }, [fetchList, isWindowVisible, lists]); // fetch all lists every 10 minutes, but only after we initialize library\n\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null); // whenever a list is not loaded and not loading, try again to load it\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, library, lists]); // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n\n  useEffect(() => {\n    Object.keys(UNSUPPORTED_LIST_URLS).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (!list || !list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, library, lists]); // automatically update lists if versions are minor/patch\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version);\n\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens); // automatically update minor/patch as long as bump matches the min update\n\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl));\n            } else {\n              console.error(`List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`);\n            }\n\n            break;\n          // update any active or inactive lists\n\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl));\n        }\n      }\n    });\n  }, [dispatch, lists, activeListUrls]);\n  return null;\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/uniswap-interface-main/src/state/lists/updater.ts"],"names":["useAllLists","getVersionUpgrade","minVersionBump","VersionUpgrade","useCallback","useEffect","useDispatch","useActiveWeb3React","useFetchListCallback","useInterval","useIsWindowVisible","acceptListUpdate","useActiveListUrls","useAllInactiveTokens","UNSUPPORTED_LIST_URLS","Updater","library","dispatch","isWindowVisible","lists","activeListUrls","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","min","tokens","MAJOR"],"mappings":"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","sourcesContent":["import { useAllLists } from 'state/lists/hooks'\nimport { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { AppDispatch } from '../index'\nimport { acceptListUpdate } from './actions'\nimport { useActiveListUrls } from './hooks'\nimport { useAllInactiveTokens } from 'hooks/Tokens'\nimport { UNSUPPORTED_LIST_URLS } from 'constants/lists'\n\nexport default function Updater(): null {\n  const { library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const isWindowVisible = useIsWindowVisible()\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists()\n  const activeListUrls = useActiveListUrls()\n\n  // initiate loading\n  useAllInactiveTokens()\n\n  const fetchList = useFetchListCallback()\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    Object.keys(lists).forEach(url =>\n      fetchList(url).catch(error => console.debug('interval list fetching error', error))\n    )\n  }, [fetchList, isWindowVisible, lists])\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    Object.keys(UNSUPPORTED_LIST_URLS).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n            // automatically update minor/patch as long as bump matches the min update\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl))\n            } else {\n              console.error(\n                `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n              )\n            }\n            break\n\n          // update any active or inactive lists\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl))\n        }\n      }\n    })\n  }, [dispatch, lists, activeListUrls])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}