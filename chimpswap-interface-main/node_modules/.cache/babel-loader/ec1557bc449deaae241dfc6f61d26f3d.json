{"ast":null,"code":"import { nanoid } from '@reduxjs/toolkit';\nimport { ChainId } from '@uniswap/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getNetworkLibrary, NETWORK_CHAIN_ID } from '../connectors';\nimport { fetchTokenList } from '../state/lists/actions';\nimport getTokenList from '../utils/getTokenList';\nimport resolveENSContentHash from '../utils/resolveENSContentHash';\nimport { useActiveWeb3React } from './index';\nexport function useFetchListCallback() {\n  const {\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const ensResolver = useCallback(ensName => {\n    if (!library || chainId !== ChainId.MAINNET) {\n      if (NETWORK_CHAIN_ID === ChainId.MAINNET) {\n        const networkLibrary = getNetworkLibrary();\n\n        if (networkLibrary) {\n          return resolveENSContentHash(ensName, networkLibrary);\n        }\n      }\n\n      throw new Error('Could not construct mainnet ENS resolver');\n    }\n\n    return resolveENSContentHash(ensName, library);\n  }, [chainId, library]); // note: prevent dispatch if using for list search or unsupported list\n\n  return useCallback(async (listUrl, sendDispatch = true) => {\n    const requestId = nanoid();\n    sendDispatch && dispatch(fetchTokenList.pending({\n      requestId,\n      url: listUrl\n    }));\n    return getTokenList(listUrl, ensResolver).then(tokenList => {\n      sendDispatch && dispatch(fetchTokenList.fulfilled({\n        url: listUrl,\n        tokenList,\n        requestId\n      }));\n      return tokenList;\n    }).catch(error => {\n      console.debug(`Failed to get list at url ${listUrl}`, error);\n      sendDispatch && dispatch(fetchTokenList.rejected({\n        url: listUrl,\n        requestId,\n        errorMessage: error.message\n      }));\n      throw error;\n    });\n  }, [dispatch, ensResolver]);\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/chimpswap-interface-main/src/hooks/useFetchListCallback.ts"],"names":["nanoid","ChainId","useCallback","useDispatch","getNetworkLibrary","NETWORK_CHAIN_ID","fetchTokenList","getTokenList","resolveENSContentHash","useActiveWeb3React","useFetchListCallback","chainId","library","dispatch","ensResolver","ensName","MAINNET","networkLibrary","Error","listUrl","sendDispatch","requestId","pending","url","then","tokenList","fulfilled","catch","error","console","debug","rejected","errorMessage","message"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,eAApD;AAEA,SAASC,cAAT,QAA+B,wBAA/B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AACA,SAASC,kBAAT,QAAmC,SAAnC;AAEA,OAAO,SAASC,oBAAT,GAAiG;AACtG,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBH,kBAAkB,EAA/C;AACA,QAAMI,QAAQ,GAAGV,WAAW,EAA5B;AAEA,QAAMW,WAAW,GAAGZ,WAAW,CAC5Ba,OAAD,IAAqB;AACnB,QAAI,CAACH,OAAD,IAAYD,OAAO,KAAKV,OAAO,CAACe,OAApC,EAA6C;AAC3C,UAAIX,gBAAgB,KAAKJ,OAAO,CAACe,OAAjC,EAA0C;AACxC,cAAMC,cAAc,GAAGb,iBAAiB,EAAxC;;AACA,YAAIa,cAAJ,EAAoB;AAClB,iBAAOT,qBAAqB,CAACO,OAAD,EAAUE,cAAV,CAA5B;AACD;AACF;;AACD,YAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;;AACD,WAAOV,qBAAqB,CAACO,OAAD,EAAUH,OAAV,CAA5B;AACD,GAZ4B,EAa7B,CAACD,OAAD,EAAUC,OAAV,CAb6B,CAA/B,CAJsG,CAoBtG;;AACA,SAAOV,WAAW,CAChB,OAAOiB,OAAP,EAAwBC,YAAY,GAAG,IAAvC,KAAgD;AAC9C,UAAMC,SAAS,GAAGrB,MAAM,EAAxB;AACAoB,IAAAA,YAAY,IAAIP,QAAQ,CAACP,cAAc,CAACgB,OAAf,CAAuB;AAAED,MAAAA,SAAF;AAAaE,MAAAA,GAAG,EAAEJ;AAAlB,KAAvB,CAAD,CAAxB;AACA,WAAOZ,YAAY,CAACY,OAAD,EAAUL,WAAV,CAAZ,CACJU,IADI,CACCC,SAAS,IAAI;AACjBL,MAAAA,YAAY,IAAIP,QAAQ,CAACP,cAAc,CAACoB,SAAf,CAAyB;AAAEH,QAAAA,GAAG,EAAEJ,OAAP;AAAgBM,QAAAA,SAAhB;AAA2BJ,QAAAA;AAA3B,OAAzB,CAAD,CAAxB;AACA,aAAOI,SAAP;AACD,KAJI,EAKJE,KALI,CAKEC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACC,KAAR,CAAe,6BAA4BX,OAAQ,EAAnD,EAAsDS,KAAtD;AACAR,MAAAA,YAAY,IAAIP,QAAQ,CAACP,cAAc,CAACyB,QAAf,CAAwB;AAAER,QAAAA,GAAG,EAAEJ,OAAP;AAAgBE,QAAAA,SAAhB;AAA2BW,QAAAA,YAAY,EAAEJ,KAAK,CAACK;AAA/C,OAAxB,CAAD,CAAxB;AACA,YAAML,KAAN;AACD,KATI,CAAP;AAUD,GAde,EAehB,CAACf,QAAD,EAAWC,WAAX,CAfgB,CAAlB;AAiBD","sourcesContent":["import { nanoid } from '@reduxjs/toolkit'\nimport { ChainId } from '@uniswap/sdk'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { getNetworkLibrary, NETWORK_CHAIN_ID } from '../connectors'\nimport { AppDispatch } from '../state'\nimport { fetchTokenList } from '../state/lists/actions'\nimport getTokenList from '../utils/getTokenList'\nimport resolveENSContentHash from '../utils/resolveENSContentHash'\nimport { useActiveWeb3React } from './index'\n\nexport function useFetchListCallback(): (listUrl: string, sendDispatch?: boolean) => Promise<TokenList> {\n  const { chainId, library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n\n  const ensResolver = useCallback(\n    (ensName: string) => {\n      if (!library || chainId !== ChainId.MAINNET) {\n        if (NETWORK_CHAIN_ID === ChainId.MAINNET) {\n          const networkLibrary = getNetworkLibrary()\n          if (networkLibrary) {\n            return resolveENSContentHash(ensName, networkLibrary)\n          }\n        }\n        throw new Error('Could not construct mainnet ENS resolver')\n      }\n      return resolveENSContentHash(ensName, library)\n    },\n    [chainId, library]\n  )\n\n  // note: prevent dispatch if using for list search or unsupported list\n  return useCallback(\n    async (listUrl: string, sendDispatch = true) => {\n      const requestId = nanoid()\n      sendDispatch && dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\n      return getTokenList(listUrl, ensResolver)\n        .then(tokenList => {\n          sendDispatch && dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\n          return tokenList\n        })\n        .catch(error => {\n          console.debug(`Failed to get list at url ${listUrl}`, error)\n          sendDispatch && dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\n          throw error\n        })\n    },\n    [dispatch, ensResolver]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}