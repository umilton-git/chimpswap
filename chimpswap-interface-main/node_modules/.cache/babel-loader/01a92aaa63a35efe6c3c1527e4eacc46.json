{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst util_1 = require(\"../util\");\n\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\n\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\n\nconst JSONRPC_1 = require(\"./JSONRPC\");\n\nconst Web3Provider_1 = require(\"./Web3Provider\");\n\nconst LOCAL_STORAGE_ADDRESSES_KEY = \"Addresses\";\n\nclass WalletLinkProvider {\n  constructor(options) {\n    this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n    this._addresses = [];\n    this._send = this.send;\n    this._sendAsync = this.sendAsync;\n\n    if (!options.relay) {\n      throw new Error(\"realy must be provided\");\n    }\n\n    if (!options.jsonRpcUrl) {\n      throw new Error(\"jsonRpcUrl must be provided\");\n    }\n\n    this._relay = options.relay;\n    this._chainId = util_1.ensureIntNumber(options.chainId || 1);\n    this._jsonRpcUrl = options.jsonRpcUrl;\n\n    const cahedAddresses = this._relay.getStorageItem(LOCAL_STORAGE_ADDRESSES_KEY);\n\n    if (cahedAddresses) {\n      const addresses = cahedAddresses.split(\" \");\n\n      if (addresses[0] !== \"\") {\n        this._addresses = addresses;\n      }\n    }\n  }\n\n  get selectedAddress() {\n    return this._addresses[0] || undefined;\n  }\n\n  get networkVersion() {\n    return this._chainId.toString(10);\n  }\n\n  get isWalletLink() {\n    return true;\n  }\n\n  get host() {\n    return this._jsonRpcUrl;\n  }\n\n  get connected() {\n    return true;\n  }\n\n  isConnected() {\n    return true;\n  }\n\n  async enable() {\n    if (this._addresses.length > 0) {\n      return this._addresses;\n    }\n\n    return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n  }\n\n  close() {\n    this._relay.resetAndReload();\n  }\n\n  send(requestOrMethod, callbackOrParams) {\n    // send<T>(method, params): Promise<T>\n    if (typeof requestOrMethod === \"string\") {\n      const method = requestOrMethod;\n      const params = Array.isArray(callbackOrParams) ? callbackOrParams : callbackOrParams !== undefined ? [callbackOrParams] : [];\n      const request = {\n        jsonrpc: \"2.0\",\n        id: 0,\n        method,\n        params\n      };\n      return this._sendRequestAsync(request).then(res => res.result);\n    } // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n\n\n    if (typeof callbackOrParams === \"function\") {\n      const request = requestOrMethod;\n      const callback = callbackOrParams;\n      return this._sendAsync(request, callback);\n    } // send(JSONRPCRequest[]): JSONRPCResponse[]\n\n\n    if (Array.isArray(requestOrMethod)) {\n      const requests = requestOrMethod;\n      return requests.map(r => this._sendRequest(r));\n    } // send(JSONRPCRequest): JSONRPCResponse\n\n\n    const req = requestOrMethod;\n    return this._sendRequest(req);\n  }\n\n  sendAsync(request, callback) {\n    if (typeof callback !== \"function\") {\n      throw new Error(\"callback is required\");\n    } // send(JSONRPCRequest[], callback): void\n\n\n    if (Array.isArray(request)) {\n      const arrayCb = callback;\n\n      this._sendMultipleRequestsAsync(request).then(responses => arrayCb(null, responses)).catch(err => arrayCb(err, null));\n\n      return;\n    } // send(JSONRPCRequest, callback): void\n\n\n    const cb = callback;\n\n    this._sendRequestAsync(request).then(response => cb(null, response)).catch(err => cb(err, null));\n  }\n\n  async scanQRCode(match) {\n    const res = await this._relay.scanQRCode(util_1.ensureRegExpString(match));\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  async arbitraryRequest(data) {\n    const res = await this._relay.arbitraryRequest(data);\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  supportsSubscriptions() {\n    return false;\n  }\n\n  subscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n\n  unsubscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n\n  disconnect() {\n    return true;\n  }\n\n  _sendRequest(request) {\n    const response = {\n      jsonrpc: \"2.0\",\n      id: request.id\n    };\n    const {\n      method\n    } = request;\n    response.result = this._handleSynchronousMethods(request);\n\n    if (response.result === undefined) {\n      throw new Error(`WalletLink does not support calling ${method} synchronously without ` + `a callback. Please provide a callback parameter to call ${method} ` + `asynchronously.`);\n    }\n\n    return response;\n  }\n\n  _setAddresses(addresses) {\n    if (!Array.isArray(addresses)) {\n      throw new Error(\"addresses is not an array\");\n    }\n\n    this._addresses = addresses.map(address => util_1.ensureAddressString(address));\n\n    this._relay.setStorageItem(LOCAL_STORAGE_ADDRESSES_KEY, addresses.join(\" \"));\n\n    window.dispatchEvent(new CustomEvent(\"walletlink:addresses\", {\n      detail: this._addresses\n    }));\n  }\n\n  _sendRequestAsync(request) {\n    return new Promise((resolve, reject) => {\n      try {\n        const syncResult = this._handleSynchronousMethods(request);\n\n        if (syncResult !== undefined) {\n          return resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: syncResult\n          });\n        }\n\n        const filterPromise = this._handleAsynchronousFilterMethods(request);\n\n        if (filterPromise !== undefined) {\n          filterPromise.then(res => resolve(Object.assign(Object.assign({}, res), {\n            id: request.id\n          }))).catch(err => reject(err));\n          return;\n        }\n      } catch (err) {\n        return reject(err);\n      }\n\n      this._handleAsynchronousMethods(request).then(res => resolve(Object.assign(Object.assign({}, res), {\n        id: request.id\n      }))).catch(err => reject(err));\n    });\n  }\n\n  _sendMultipleRequestsAsync(requests) {\n    return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n  }\n\n  _handleSynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_accounts:\n        return this._eth_accounts();\n\n      case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n        return this._eth_coinbase();\n\n      case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n        return this._eth_uninstallFilter(params);\n\n      case JSONRPC_1.JSONRPCMethod.net_version:\n        return this._net_version();\n\n      default:\n        return undefined;\n    }\n  }\n\n  _handleAsynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n        return this._eth_requestAccounts();\n\n      case JSONRPC_1.JSONRPCMethod.eth_sign:\n        return this._eth_sign(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n        return this._eth_ecRecover(params);\n\n      case JSONRPC_1.JSONRPCMethod.personal_sign:\n        return this._personal_sign(params);\n\n      case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n        return this._personal_ecRecover(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n        return this._eth_signTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n        return this._eth_sendRawTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n        return this._eth_sendTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n        return this._eth_signTypedData_v1(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n        return this._throwUnsupportedMethodError();\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n        return this._eth_signTypedData_v3(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n        return this._eth_signTypedData_v4(params);\n\n      case JSONRPC_1.JSONRPCMethod.walletlink_arbitrary:\n        return this._walletlink_arbitrary(params);\n    }\n\n    return window.fetch(this._jsonRpcUrl, {\n      method: \"POST\",\n      body: JSON.stringify(request),\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(json => {\n      if (!json) {\n        throw new Web3Provider_1.ProviderError(\"unexpected response\");\n      }\n\n      const response = json;\n      const {\n        error\n      } = response;\n\n      if (error) {\n        throw new Web3Provider_1.ProviderError(error.message || \"RPC Error\", error.code, error.data);\n      }\n\n      return response;\n    });\n  }\n\n  _handleAsynchronousFilterMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n        return this._eth_newFilter(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n        return this._eth_newBlockFilter();\n\n      case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n        return this._eth_newPendingTransactionFilter();\n\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n        return this._eth_getFilterChanges(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n        return this._eth_getFilterLogs(params);\n    }\n\n    return undefined;\n  }\n\n  _isKnownAddress(addressString) {\n    try {\n      const address = util_1.ensureAddressString(addressString);\n      return this._addresses.includes(address);\n    } catch (_a) {}\n\n    return false;\n  }\n\n  _ensureKnownAddress(addressString) {\n    if (!this._isKnownAddress(addressString)) {\n      throw new Error(\"Unknown Ethereum address\");\n    }\n  }\n\n  _prepareTransactionParams(tx) {\n    const fromAddress = tx.from ? util_1.ensureAddressString(tx.from) : this.selectedAddress;\n\n    if (!fromAddress) {\n      throw new Error(\"Ethereum address is unavailable\");\n    }\n\n    this._ensureKnownAddress(fromAddress);\n\n    const toAddress = tx.to ? util_1.ensureAddressString(tx.to) : null;\n    const weiValue = tx.value != null ? util_1.ensureBN(tx.value) : new bn_js_1.default(0);\n    const data = tx.data ? util_1.ensureBuffer(tx.data) : Buffer.alloc(0);\n    const nonce = tx.nonce != null ? util_1.ensureIntNumber(tx.nonce) : null;\n    const gasPriceInWei = tx.gasPrice != null ? util_1.ensureBN(tx.gasPrice) : null;\n    const gasLimit = tx.gas != null ? util_1.ensureBN(tx.gas) : null;\n    const chainId = this._chainId;\n    return {\n      fromAddress,\n      toAddress,\n      weiValue,\n      data,\n      nonce,\n      gasPriceInWei,\n      gasLimit,\n      chainId\n    };\n  }\n\n  _requireAuthorization() {\n    if (this._addresses.length === 0) {\n      throw new Web3Provider_1.ProviderError(\"Unauthorized\", Web3Provider_1.ProviderErrorCode.UNAUTHORIZED);\n    }\n  }\n\n  _throwUnsupportedMethodError() {\n    throw new Web3Provider_1.ProviderError(\"Unsupported method\", Web3Provider_1.ProviderErrorCode.UNSUPPORTED_METHOD);\n  }\n\n  async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n    this._ensureKnownAddress(address);\n\n    try {\n      const res = await this._relay.signEthereumMessage(message, address, addPrefix, typedDataJson);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw new Web3Provider_1.ProviderError(\"User denied message signature\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_SIGNATURE);\n      }\n\n      throw err;\n    }\n  }\n\n  async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n    const res = await this._relay.ethereumAddressFromSignedMessage(message, signature, addPrefix);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n\n  _eth_accounts() {\n    return this._addresses;\n  }\n\n  _eth_coinbase() {\n    return this.selectedAddress || null;\n  }\n\n  _net_version() {\n    return this._chainId.toString(10);\n  }\n\n  async _eth_requestAccounts() {\n    if (this._addresses.length > 0) {\n      return Promise.resolve({\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: this._addresses\n      });\n    }\n\n    let res;\n\n    try {\n      res = await this._relay.requestEthereumAccounts();\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw new Web3Provider_1.ProviderError(\"User denied account authorization\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_ACCOUNTS);\n      }\n\n      throw err;\n    }\n\n    if (!res.result) {\n      throw new Error(\"accounts received is empty\");\n    }\n\n    this._setAddresses(res.result);\n\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: this._addresses\n    };\n  }\n\n  _eth_sign(params) {\n    this._requireAuthorization();\n\n    const address = util_1.ensureAddressString(params[0]);\n    const message = util_1.ensureBuffer(params[1]);\n    return this._signEthereumMessage(message, address, false);\n  }\n\n  _eth_ecRecover(params) {\n    const message = util_1.ensureBuffer(params[0]);\n    const signature = util_1.ensureBuffer(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, false);\n  }\n\n  _personal_sign(params) {\n    this._requireAuthorization();\n\n    const message = util_1.ensureBuffer(params[0]);\n    const address = util_1.ensureAddressString(params[1]);\n    return this._signEthereumMessage(message, address, true);\n  }\n\n  _personal_ecRecover(params) {\n    const message = util_1.ensureBuffer(params[0]);\n    const signature = util_1.ensureBuffer(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, true);\n  }\n\n  async _eth_signTransaction(params) {\n    this._requireAuthorization();\n\n    const tx = this._prepareTransactionParams(params[0] || {});\n\n    try {\n      const res = await this._relay.signEthereumTransaction(tx);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw new Web3Provider_1.ProviderError(\"User denied transaction signature\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_SIGNATURE);\n      }\n\n      throw err;\n    }\n  }\n\n  async _eth_sendRawTransaction(params) {\n    const signedTransaction = util_1.ensureBuffer(params[0]);\n    const res = await this._relay.submitEthereumTransaction(signedTransaction, this._chainId);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n\n  async _eth_sendTransaction(params) {\n    this._requireAuthorization();\n\n    const tx = this._prepareTransactionParams(params[0] || {});\n\n    try {\n      const res = await this._relay.signAndSubmitEthereumTransaction(tx);\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw new Web3Provider_1.ProviderError(\"User denied transaction signature\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_SIGNATURE);\n      }\n\n      throw err;\n    }\n  }\n\n  async _eth_signTypedData_v1(params) {\n    this._requireAuthorization();\n\n    const typedData = params[0];\n    const address = util_1.ensureAddressString(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({\n      data: typedData\n    });\n    const typedDataJson = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJson);\n  }\n\n  async _eth_signTypedData_v3(params) {\n    this._requireAuthorization();\n\n    const address = util_1.ensureAddressString(params[0]);\n    const typedData = params[1];\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v3({\n      data: typedData\n    });\n    const typedDataJson = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJson);\n  }\n\n  async _eth_signTypedData_v4(params) {\n    this._requireAuthorization();\n\n    const address = util_1.ensureAddressString(params[0]);\n    const typedData = params[1];\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v4({\n      data: typedData\n    });\n    const typedDataJson = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJson);\n  }\n\n  async _walletlink_arbitrary(params) {\n    const data = params[0];\n\n    if (typeof data !== \"string\") {\n      throw new Error(\"parameter must be a string\");\n    }\n\n    const result = await this.arbitraryRequest(data);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result\n    };\n  }\n\n  _eth_uninstallFilter(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.uninstallFilter(filterId);\n  }\n\n  async _eth_newFilter(params) {\n    const param = params[0];\n    const filterId = await this._filterPolyfill.newFilter(param);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  async _eth_newBlockFilter() {\n    const filterId = await this._filterPolyfill.newBlockFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  async _eth_newPendingTransactionFilter() {\n    const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  _eth_getFilterChanges(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.getFilterChanges(filterId);\n  }\n\n  _eth_getFilterLogs(params) {\n    const filterId = util_1.ensureHexString(params[0]);\n    return this._filterPolyfill.getFilterLogs(filterId);\n  }\n\n}\n\nexports.WalletLinkProvider = WalletLinkProvider;","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/uniswap-interface-main/node_modules/walletlink/dist/provider/WalletLinkProvider.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","bn_js_1","require","util_1","eth_eip712_util_1","FilterPolyfill_1","JSONRPC_1","Web3Provider_1","LOCAL_STORAGE_ADDRESSES_KEY","WalletLinkProvider","constructor","options","_filterPolyfill","FilterPolyfill","_addresses","_send","send","_sendAsync","sendAsync","relay","Error","jsonRpcUrl","_relay","_chainId","ensureIntNumber","chainId","_jsonRpcUrl","cahedAddresses","getStorageItem","addresses","split","selectedAddress","undefined","networkVersion","toString","isWalletLink","host","connected","isConnected","enable","length","JSONRPCMethod","eth_requestAccounts","close","resetAndReload","requestOrMethod","callbackOrParams","method","params","Array","isArray","request","jsonrpc","id","_sendRequestAsync","then","res","result","callback","requests","map","r","_sendRequest","req","arrayCb","_sendMultipleRequestsAsync","responses","catch","err","cb","response","scanQRCode","match","ensureRegExpString","arbitraryRequest","data","supportsSubscriptions","subscribe","unsubscribe","disconnect","_handleSynchronousMethods","_setAddresses","address","ensureAddressString","setStorageItem","join","window","dispatchEvent","CustomEvent","detail","Promise","resolve","reject","syncResult","filterPromise","_handleAsynchronousFilterMethods","assign","_handleAsynchronousMethods","all","eth_accounts","_eth_accounts","eth_coinbase","_eth_coinbase","eth_uninstallFilter","_eth_uninstallFilter","net_version","_net_version","_eth_requestAccounts","eth_sign","_eth_sign","eth_ecRecover","_eth_ecRecover","personal_sign","_personal_sign","personal_ecRecover","_personal_ecRecover","eth_signTransaction","_eth_signTransaction","eth_sendRawTransaction","_eth_sendRawTransaction","eth_sendTransaction","_eth_sendTransaction","eth_signTypedData_v1","_eth_signTypedData_v1","eth_signTypedData_v2","_throwUnsupportedMethodError","eth_signTypedData_v3","_eth_signTypedData_v3","eth_signTypedData_v4","eth_signTypedData","_eth_signTypedData_v4","walletlink_arbitrary","_walletlink_arbitrary","fetch","body","JSON","stringify","mode","headers","json","ProviderError","error","message","code","eth_newFilter","_eth_newFilter","eth_newBlockFilter","_eth_newBlockFilter","eth_newPendingTransactionFilter","_eth_newPendingTransactionFilter","eth_getFilterChanges","_eth_getFilterChanges","eth_getFilterLogs","_eth_getFilterLogs","_isKnownAddress","addressString","includes","_a","_ensureKnownAddress","_prepareTransactionParams","tx","fromAddress","from","toAddress","to","weiValue","ensureBN","default","ensureBuffer","Buffer","alloc","nonce","gasPriceInWei","gasPrice","gasLimit","gas","_requireAuthorization","ProviderErrorCode","UNAUTHORIZED","UNSUPPORTED_METHOD","_signEthereumMessage","addPrefix","typedDataJson","signEthereumMessage","USER_DENIED_REQUEST_SIGNATURE","_ethereumAddressFromSignedMessage","signature","ethereumAddressFromSignedMessage","requestEthereumAccounts","USER_DENIED_REQUEST_ACCOUNTS","signEthereumTransaction","signedTransaction","submitEthereumTransaction","signAndSubmitEthereumTransaction","typedData","hashForSignTypedDataLegacy","hashForSignTypedData_v3","hashForSignTypedData_v4","filterId","ensureHexString","uninstallFilter","param","newFilter","newBlockFilter","newPendingTransactionFilter","getFilterChanges","getFilterLogs"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst util_1 = require(\"../util\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst JSONRPC_1 = require(\"./JSONRPC\");\nconst Web3Provider_1 = require(\"./Web3Provider\");\nconst LOCAL_STORAGE_ADDRESSES_KEY = \"Addresses\";\nclass WalletLinkProvider {\n    constructor(options) {\n        this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n        this._addresses = [];\n        this._send = this.send;\n        this._sendAsync = this.sendAsync;\n        if (!options.relay) {\n            throw new Error(\"realy must be provided\");\n        }\n        if (!options.jsonRpcUrl) {\n            throw new Error(\"jsonRpcUrl must be provided\");\n        }\n        this._relay = options.relay;\n        this._chainId = util_1.ensureIntNumber(options.chainId || 1);\n        this._jsonRpcUrl = options.jsonRpcUrl;\n        const cahedAddresses = this._relay.getStorageItem(LOCAL_STORAGE_ADDRESSES_KEY);\n        if (cahedAddresses) {\n            const addresses = cahedAddresses.split(\" \");\n            if (addresses[0] !== \"\") {\n                this._addresses = addresses;\n            }\n        }\n    }\n    get selectedAddress() {\n        return this._addresses[0] || undefined;\n    }\n    get networkVersion() {\n        return this._chainId.toString(10);\n    }\n    get isWalletLink() {\n        return true;\n    }\n    get host() {\n        return this._jsonRpcUrl;\n    }\n    get connected() {\n        return true;\n    }\n    isConnected() {\n        return true;\n    }\n    async enable() {\n        if (this._addresses.length > 0) {\n            return this._addresses;\n        }\n        return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n    }\n    close() {\n        this._relay.resetAndReload();\n    }\n    send(requestOrMethod, callbackOrParams) {\n        // send<T>(method, params): Promise<T>\n        if (typeof requestOrMethod === \"string\") {\n            const method = requestOrMethod;\n            const params = Array.isArray(callbackOrParams)\n                ? callbackOrParams\n                : callbackOrParams !== undefined\n                    ? [callbackOrParams]\n                    : [];\n            const request = {\n                jsonrpc: \"2.0\",\n                id: 0,\n                method,\n                params\n            };\n            return this._sendRequestAsync(request).then(res => res.result);\n        }\n        // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n        if (typeof callbackOrParams === \"function\") {\n            const request = requestOrMethod;\n            const callback = callbackOrParams;\n            return this._sendAsync(request, callback);\n        }\n        // send(JSONRPCRequest[]): JSONRPCResponse[]\n        if (Array.isArray(requestOrMethod)) {\n            const requests = requestOrMethod;\n            return requests.map(r => this._sendRequest(r));\n        }\n        // send(JSONRPCRequest): JSONRPCResponse\n        const req = requestOrMethod;\n        return this._sendRequest(req);\n    }\n    sendAsync(request, callback) {\n        if (typeof callback !== \"function\") {\n            throw new Error(\"callback is required\");\n        }\n        // send(JSONRPCRequest[], callback): void\n        if (Array.isArray(request)) {\n            const arrayCb = callback;\n            this._sendMultipleRequestsAsync(request)\n                .then(responses => arrayCb(null, responses))\n                .catch(err => arrayCb(err, null));\n            return;\n        }\n        // send(JSONRPCRequest, callback): void\n        const cb = callback;\n        this._sendRequestAsync(request)\n            .then(response => cb(null, response))\n            .catch(err => cb(err, null));\n    }\n    async scanQRCode(match) {\n        const res = await this._relay.scanQRCode(util_1.ensureRegExpString(match));\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async arbitraryRequest(data) {\n        const res = await this._relay.arbitraryRequest(data);\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    supportsSubscriptions() {\n        return false;\n    }\n    subscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    unsubscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    disconnect() {\n        return true;\n    }\n    _sendRequest(request) {\n        const response = {\n            jsonrpc: \"2.0\",\n            id: request.id\n        };\n        const { method } = request;\n        response.result = this._handleSynchronousMethods(request);\n        if (response.result === undefined) {\n            throw new Error(`WalletLink does not support calling ${method} synchronously without ` +\n                `a callback. Please provide a callback parameter to call ${method} ` +\n                `asynchronously.`);\n        }\n        return response;\n    }\n    _setAddresses(addresses) {\n        if (!Array.isArray(addresses)) {\n            throw new Error(\"addresses is not an array\");\n        }\n        this._addresses = addresses.map(address => util_1.ensureAddressString(address));\n        this._relay.setStorageItem(LOCAL_STORAGE_ADDRESSES_KEY, addresses.join(\" \"));\n        window.dispatchEvent(new CustomEvent(\"walletlink:addresses\", { detail: this._addresses }));\n    }\n    _sendRequestAsync(request) {\n        return new Promise((resolve, reject) => {\n            try {\n                const syncResult = this._handleSynchronousMethods(request);\n                if (syncResult !== undefined) {\n                    return resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: syncResult\n                    });\n                }\n                const filterPromise = this._handleAsynchronousFilterMethods(request);\n                if (filterPromise !== undefined) {\n                    filterPromise\n                        .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                        .catch(err => reject(err));\n                    return;\n                }\n            }\n            catch (err) {\n                return reject(err);\n            }\n            this._handleAsynchronousMethods(request)\n                .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                .catch(err => reject(err));\n        });\n    }\n    _sendMultipleRequestsAsync(requests) {\n        return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n    }\n    _handleSynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_accounts:\n                return this._eth_accounts();\n            case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n                return this._eth_coinbase();\n            case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n                return this._eth_uninstallFilter(params);\n            case JSONRPC_1.JSONRPCMethod.net_version:\n                return this._net_version();\n            default:\n                return undefined;\n        }\n    }\n    _handleAsynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n                return this._eth_requestAccounts();\n            case JSONRPC_1.JSONRPCMethod.eth_sign:\n                return this._eth_sign(params);\n            case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n                return this._eth_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.personal_sign:\n                return this._personal_sign(params);\n            case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n                return this._personal_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n                return this._eth_signTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n                return this._eth_sendRawTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n                return this._eth_sendTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n                return this._eth_signTypedData_v1(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n                return this._throwUnsupportedMethodError();\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n                return this._eth_signTypedData_v3(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n                return this._eth_signTypedData_v4(params);\n            case JSONRPC_1.JSONRPCMethod.walletlink_arbitrary:\n                return this._walletlink_arbitrary(params);\n        }\n        return window\n            .fetch(this._jsonRpcUrl, {\n            method: \"POST\",\n            body: JSON.stringify(request),\n            mode: \"cors\",\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n            .then(res => res.json())\n            .then(json => {\n            if (!json) {\n                throw new Web3Provider_1.ProviderError(\"unexpected response\");\n            }\n            const response = json;\n            const { error } = response;\n            if (error) {\n                throw new Web3Provider_1.ProviderError(error.message || \"RPC Error\", error.code, error.data);\n            }\n            return response;\n        });\n    }\n    _handleAsynchronousFilterMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n                return this._eth_newFilter(params);\n            case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n                return this._eth_newBlockFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n                return this._eth_newPendingTransactionFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n                return this._eth_getFilterChanges(params);\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n                return this._eth_getFilterLogs(params);\n        }\n        return undefined;\n    }\n    _isKnownAddress(addressString) {\n        try {\n            const address = util_1.ensureAddressString(addressString);\n            return this._addresses.includes(address);\n        }\n        catch (_a) { }\n        return false;\n    }\n    _ensureKnownAddress(addressString) {\n        if (!this._isKnownAddress(addressString)) {\n            throw new Error(\"Unknown Ethereum address\");\n        }\n    }\n    _prepareTransactionParams(tx) {\n        const fromAddress = tx.from\n            ? util_1.ensureAddressString(tx.from)\n            : this.selectedAddress;\n        if (!fromAddress) {\n            throw new Error(\"Ethereum address is unavailable\");\n        }\n        this._ensureKnownAddress(fromAddress);\n        const toAddress = tx.to ? util_1.ensureAddressString(tx.to) : null;\n        const weiValue = tx.value != null ? util_1.ensureBN(tx.value) : new bn_js_1.default(0);\n        const data = tx.data ? util_1.ensureBuffer(tx.data) : Buffer.alloc(0);\n        const nonce = tx.nonce != null ? util_1.ensureIntNumber(tx.nonce) : null;\n        const gasPriceInWei = tx.gasPrice != null ? util_1.ensureBN(tx.gasPrice) : null;\n        const gasLimit = tx.gas != null ? util_1.ensureBN(tx.gas) : null;\n        const chainId = this._chainId;\n        return {\n            fromAddress,\n            toAddress,\n            weiValue,\n            data,\n            nonce,\n            gasPriceInWei,\n            gasLimit,\n            chainId\n        };\n    }\n    _requireAuthorization() {\n        if (this._addresses.length === 0) {\n            throw new Web3Provider_1.ProviderError(\"Unauthorized\", Web3Provider_1.ProviderErrorCode.UNAUTHORIZED);\n        }\n    }\n    _throwUnsupportedMethodError() {\n        throw new Web3Provider_1.ProviderError(\"Unsupported method\", Web3Provider_1.ProviderErrorCode.UNSUPPORTED_METHOD);\n    }\n    async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n        this._ensureKnownAddress(address);\n        try {\n            const res = await this._relay.signEthereumMessage(message, address, addPrefix, typedDataJson);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw new Web3Provider_1.ProviderError(\"User denied message signature\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_SIGNATURE);\n            }\n            throw err;\n        }\n    }\n    async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n        const res = await this._relay.ethereumAddressFromSignedMessage(message, signature, addPrefix);\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    _eth_accounts() {\n        return this._addresses;\n    }\n    _eth_coinbase() {\n        return this.selectedAddress || null;\n    }\n    _net_version() {\n        return this._chainId.toString(10);\n    }\n    async _eth_requestAccounts() {\n        if (this._addresses.length > 0) {\n            return Promise.resolve({\n                jsonrpc: \"2.0\",\n                id: 0,\n                result: this._addresses\n            });\n        }\n        let res;\n        try {\n            res = await this._relay.requestEthereumAccounts();\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw new Web3Provider_1.ProviderError(\"User denied account authorization\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_ACCOUNTS);\n            }\n            throw err;\n        }\n        if (!res.result) {\n            throw new Error(\"accounts received is empty\");\n        }\n        this._setAddresses(res.result);\n        return { jsonrpc: \"2.0\", id: 0, result: this._addresses };\n    }\n    _eth_sign(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const message = util_1.ensureBuffer(params[1]);\n        return this._signEthereumMessage(message, address, false);\n    }\n    _eth_ecRecover(params) {\n        const message = util_1.ensureBuffer(params[0]);\n        const signature = util_1.ensureBuffer(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, false);\n    }\n    _personal_sign(params) {\n        this._requireAuthorization();\n        const message = util_1.ensureBuffer(params[0]);\n        const address = util_1.ensureAddressString(params[1]);\n        return this._signEthereumMessage(message, address, true);\n    }\n    _personal_ecRecover(params) {\n        const message = util_1.ensureBuffer(params[0]);\n        const signature = util_1.ensureBuffer(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, true);\n    }\n    async _eth_signTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const res = await this._relay.signEthereumTransaction(tx);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw new Web3Provider_1.ProviderError(\"User denied transaction signature\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_SIGNATURE);\n            }\n            throw err;\n        }\n    }\n    async _eth_sendRawTransaction(params) {\n        const signedTransaction = util_1.ensureBuffer(params[0]);\n        const res = await this._relay.submitEthereumTransaction(signedTransaction, this._chainId);\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    async _eth_sendTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const res = await this._relay.signAndSubmitEthereumTransaction(tx);\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw new Web3Provider_1.ProviderError(\"User denied transaction signature\", Web3Provider_1.ProviderErrorCode.USER_DENIED_REQUEST_SIGNATURE);\n            }\n            throw err;\n        }\n    }\n    async _eth_signTypedData_v1(params) {\n        this._requireAuthorization();\n        const typedData = params[0];\n        const address = util_1.ensureAddressString(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({ data: typedData });\n        const typedDataJson = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJson);\n    }\n    async _eth_signTypedData_v3(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const typedData = params[1];\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v3({ data: typedData });\n        const typedDataJson = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJson);\n    }\n    async _eth_signTypedData_v4(params) {\n        this._requireAuthorization();\n        const address = util_1.ensureAddressString(params[0]);\n        const typedData = params[1];\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v4({ data: typedData });\n        const typedDataJson = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJson);\n    }\n    async _walletlink_arbitrary(params) {\n        const data = params[0];\n        if (typeof data !== \"string\") {\n            throw new Error(\"parameter must be a string\");\n        }\n        const result = await this.arbitraryRequest(data);\n        return { jsonrpc: \"2.0\", id: 0, result };\n    }\n    _eth_uninstallFilter(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.uninstallFilter(filterId);\n    }\n    async _eth_newFilter(params) {\n        const param = params[0];\n        const filterId = await this._filterPolyfill.newFilter(param);\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newBlockFilter() {\n        const filterId = await this._filterPolyfill.newBlockFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newPendingTransactionFilter() {\n        const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    _eth_getFilterChanges(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.getFilterChanges(filterId);\n    }\n    _eth_getFilterLogs(params) {\n        const filterId = util_1.ensureHexString(params[0]);\n        return this._filterPolyfill.getFilterLogs(filterId);\n    }\n}\nexports.WalletLinkProvider = WalletLinkProvider;\n"]},"metadata":{},"sourceType":"script"}