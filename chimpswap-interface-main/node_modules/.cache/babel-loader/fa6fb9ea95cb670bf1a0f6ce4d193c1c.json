{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ulyss\\\\chimpswap\\\\uniswap-interface-main\\\\src\\\\components\\\\swap\\\\SwapRoute.tsx\";\nimport React, { Fragment, memo, useContext } from 'react';\nimport { ChevronRight } from 'react-feather';\nimport { Flex } from 'rebass';\nimport { ThemeContext } from 'styled-components';\nimport { TYPE } from '../../theme';\nimport { unwrappedToken } from 'utils/wrappedCurrency';\nexport default memo(function SwapRoute({\n  trade\n}) {\n  const theme = useContext(ThemeContext);\n  return /*#__PURE__*/React.createElement(Flex, {\n    flexWrap: \"wrap\",\n    width: \"100%\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, trade.route.path.map((token, i, path) => {\n    const isLastItem = i === path.length - 1;\n    const currency = unwrappedToken(token);\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Flex, {\n      alignItems: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TYPE.black, {\n      fontSize: 14,\n      color: theme.text1,\n      ml: \"0.125rem\",\n      mr: \"0.125rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 15\n      }\n    }, currency.symbol)), isLastItem ? null : /*#__PURE__*/React.createElement(ChevronRight, {\n      size: 12,\n      color: theme.text2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 34\n      }\n    }));\n  }));\n});","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/uniswap-interface-main/src/components/swap/SwapRoute.tsx"],"names":["React","Fragment","memo","useContext","ChevronRight","Flex","ThemeContext","TYPE","unwrappedToken","SwapRoute","trade","theme","route","path","map","token","i","isLastItem","length","currency","text1","symbol","text2"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,IAA1B,EAAgCC,UAAhC,QAAkD,OAAlD;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAEA,eAAeN,IAAI,CAAC,SAASO,SAAT,CAAmB;AAAEC,EAAAA;AAAF,CAAnB,EAAgD;AAClE,QAAMC,KAAK,GAAGR,UAAU,CAACG,YAAD,CAAxB;AACA,sBACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,MAAf;AAAsB,IAAA,KAAK,EAAC,MAA5B;AAAmC,IAAA,cAAc,EAAC,UAAlD;AAA6D,IAAA,UAAU,EAAC,QAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,KAAK,CAACE,KAAN,CAAYC,IAAZ,CAAiBC,GAAjB,CAAqB,CAACC,KAAD,EAAQC,CAAR,EAAWH,IAAX,KAAoB;AACxC,UAAMI,UAAmB,GAAGD,CAAC,KAAKH,IAAI,CAACK,MAAL,GAAc,CAAhD;AACA,UAAMC,QAAQ,GAAGX,cAAc,CAACO,KAAD,CAA/B;AACA,wBACE,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEC,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,UAAU,EAAC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,QAAQ,EAAE,EAAtB;AAA0B,MAAA,KAAK,EAAEL,KAAK,CAACS,KAAvC;AAA8C,MAAA,EAAE,EAAC,UAAjD;AAA4D,MAAA,EAAE,EAAC,UAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,QAAQ,CAACE,MADZ,CADF,CADF,EAMGJ,UAAU,GAAG,IAAH,gBAAU,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAE,EAApB;AAAwB,MAAA,KAAK,EAAEN,KAAK,CAACW,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANvB,CADF;AAUD,GAbA,CADH,CADF;AAkBD,CApBkB,CAAnB","sourcesContent":["import { Trade } from '@uniswap/sdk'\nimport React, { Fragment, memo, useContext } from 'react'\nimport { ChevronRight } from 'react-feather'\nimport { Flex } from 'rebass'\nimport { ThemeContext } from 'styled-components'\nimport { TYPE } from '../../theme'\nimport { unwrappedToken } from 'utils/wrappedCurrency'\n\nexport default memo(function SwapRoute({ trade }: { trade: Trade }) {\n  const theme = useContext(ThemeContext)\n  return (\n    <Flex flexWrap=\"wrap\" width=\"100%\" justifyContent=\"flex-end\" alignItems=\"center\">\n      {trade.route.path.map((token, i, path) => {\n        const isLastItem: boolean = i === path.length - 1\n        const currency = unwrappedToken(token)\n        return (\n          <Fragment key={i}>\n            <Flex alignItems=\"end\">\n              <TYPE.black fontSize={14} color={theme.text1} ml=\"0.125rem\" mr=\"0.125rem\">\n                {currency.symbol}\n              </TYPE.black>\n            </Flex>\n            {isLastItem ? null : <ChevronRight size={12} color={theme.text2} />}\n          </Fragment>\n        )\n      })}\n    </Flex>\n  )\n})\n"]},"metadata":{},"sourceType":"module"}