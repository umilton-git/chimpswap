{"ast":null,"code":"import { useMemo } from 'react';\nimport contenthashToUri from '../utils/contenthashToUri';\nimport { parseENSAddress } from '../utils/parseENSAddress';\nimport uriToHttp from '../utils/uriToHttp';\nimport useENSContentHash from './useENSContentHash';\nexport default function useHttpLocations(uri) {\n  const ens = useMemo(() => uri ? parseENSAddress(uri) : undefined, [uri]);\n  const resolvedContentHash = useENSContentHash(ens === null || ens === void 0 ? void 0 : ens.ensName);\n  return useMemo(() => {\n    if (ens) {\n      return resolvedContentHash.contenthash ? uriToHttp(contenthashToUri(resolvedContentHash.contenthash)) : [];\n    } else {\n      return uri ? uriToHttp(uri) : [];\n    }\n  }, [ens, resolvedContentHash.contenthash, uri]);\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/chimpswap-interface-main/src/hooks/useHttpLocations.ts"],"names":["useMemo","contenthashToUri","parseENSAddress","uriToHttp","useENSContentHash","useHttpLocations","uri","ens","undefined","resolvedContentHash","ensName","contenthash"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,eAAe,SAASC,gBAAT,CAA0BC,GAA1B,EAA6D;AAC1E,QAAMC,GAAG,GAAGP,OAAO,CAAC,MAAOM,GAAG,GAAGJ,eAAe,CAACI,GAAD,CAAlB,GAA0BE,SAArC,EAAiD,CAACF,GAAD,CAAjD,CAAnB;AACA,QAAMG,mBAAmB,GAAGL,iBAAiB,CAACG,GAAD,aAACA,GAAD,uBAACA,GAAG,CAAEG,OAAN,CAA7C;AACA,SAAOV,OAAO,CAAC,MAAM;AACnB,QAAIO,GAAJ,EAAS;AACP,aAAOE,mBAAmB,CAACE,WAApB,GAAkCR,SAAS,CAACF,gBAAgB,CAACQ,mBAAmB,CAACE,WAArB,CAAjB,CAA3C,GAAiG,EAAxG;AACD,KAFD,MAEO;AACL,aAAOL,GAAG,GAAGH,SAAS,CAACG,GAAD,CAAZ,GAAoB,EAA9B;AACD;AACF,GANa,EAMX,CAACC,GAAD,EAAME,mBAAmB,CAACE,WAA1B,EAAuCL,GAAvC,CANW,CAAd;AAOD","sourcesContent":["import { useMemo } from 'react'\nimport contenthashToUri from '../utils/contenthashToUri'\nimport { parseENSAddress } from '../utils/parseENSAddress'\nimport uriToHttp from '../utils/uriToHttp'\nimport useENSContentHash from './useENSContentHash'\n\nexport default function useHttpLocations(uri: string | undefined): string[] {\n  const ens = useMemo(() => (uri ? parseENSAddress(uri) : undefined), [uri])\n  const resolvedContentHash = useENSContentHash(ens?.ensName)\n  return useMemo(() => {\n    if (ens) {\n      return resolvedContentHash.contenthash ? uriToHttp(contenthashToUri(resolvedContentHash.contenthash)) : []\n    } else {\n      return uri ? uriToHttp(uri) : []\n    }\n  }, [ens, resolvedContentHash.contenthash, uri])\n}\n"]},"metadata":{},"sourceType":"module"}