{"ast":null,"code":"import { getTokenLogoURL } from './../components/CurrencyLogo/index';\nimport { wrappedCurrency } from 'utils/wrappedCurrency';\nimport { useCallback, useState } from 'react';\nimport { useActiveWeb3React } from 'hooks';\nexport default function useAddTokenToMetamask(currencyToAdd) {\n  const {\n    library,\n    chainId\n  } = useActiveWeb3React();\n  const token = wrappedCurrency(currencyToAdd, chainId);\n  const [success, setSuccess] = useState();\n  const addToken = useCallback(() => {\n    if (library && library.provider.isMetaMask && library.provider.request && token) {\n      library.provider.request({\n        method: 'wallet_watchAsset',\n        params: {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n          //@ts-ignore // need this for incorrect ethers provider type\n          type: 'ERC20',\n          options: {\n            address: token.address,\n            symbol: token.symbol,\n            decimals: token.decimals,\n            image: getTokenLogoURL(token.address)\n          }\n        }\n      }).then(success => {\n        setSuccess(success);\n      }).catch(() => setSuccess(false));\n    } else {\n      setSuccess(false);\n    }\n  }, [library, token]);\n  return {\n    addToken,\n    success\n  };\n}","map":{"version":3,"sources":["C:/Users/Ulyss/chimpswap/uniswap-interface-main/src/hooks/useAddTokenToMetamask.ts"],"names":["getTokenLogoURL","wrappedCurrency","useCallback","useState","useActiveWeb3React","useAddTokenToMetamask","currencyToAdd","library","chainId","token","success","setSuccess","addToken","provider","isMetaMask","request","method","params","type","options","address","symbol","decimals","image","then","catch"],"mappings":"AAAA,SAASA,eAAT,QAAgC,oCAAhC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AAEA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AAEA,eAAe,SAASC,qBAAT,CACbC,aADa,EAE2C;AACxD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBJ,kBAAkB,EAA/C;AAEA,QAAMK,KAAwB,GAAGR,eAAe,CAACK,aAAD,EAAgBE,OAAhB,CAAhD;AAEA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;AAEA,QAAMS,QAAQ,GAAGV,WAAW,CAAC,MAAM;AACjC,QAAIK,OAAO,IAAIA,OAAO,CAACM,QAAR,CAAiBC,UAA5B,IAA0CP,OAAO,CAACM,QAAR,CAAiBE,OAA3D,IAAsEN,KAA1E,EAAiF;AAC/EF,MAAAA,OAAO,CAACM,QAAR,CACGE,OADH,CACW;AACPC,QAAAA,MAAM,EAAE,mBADD;AAEPC,QAAAA,MAAM,EAAE;AACN;AACA;AACAC,UAAAA,IAAI,EAAE,OAHA;AAINC,UAAAA,OAAO,EAAE;AACPC,YAAAA,OAAO,EAAEX,KAAK,CAACW,OADR;AAEPC,YAAAA,MAAM,EAAEZ,KAAK,CAACY,MAFP;AAGPC,YAAAA,QAAQ,EAAEb,KAAK,CAACa,QAHT;AAIPC,YAAAA,KAAK,EAAEvB,eAAe,CAACS,KAAK,CAACW,OAAP;AAJf;AAJH;AAFD,OADX,EAeGI,IAfH,CAeQd,OAAO,IAAI;AACfC,QAAAA,UAAU,CAACD,OAAD,CAAV;AACD,OAjBH,EAkBGe,KAlBH,CAkBS,MAAMd,UAAU,CAAC,KAAD,CAlBzB;AAmBD,KApBD,MAoBO;AACLA,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAxB2B,EAwBzB,CAACJ,OAAD,EAAUE,KAAV,CAxByB,CAA5B;AA0BA,SAAO;AAAEG,IAAAA,QAAF;AAAYF,IAAAA;AAAZ,GAAP;AACD","sourcesContent":["import { getTokenLogoURL } from './../components/CurrencyLogo/index'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { Currency, Token } from '@uniswap/sdk'\nimport { useCallback, useState } from 'react'\nimport { useActiveWeb3React } from 'hooks'\n\nexport default function useAddTokenToMetamask(\n  currencyToAdd: Currency | undefined\n): { addToken: () => void; success: boolean | undefined } {\n  const { library, chainId } = useActiveWeb3React()\n\n  const token: Token | undefined = wrappedCurrency(currencyToAdd, chainId)\n\n  const [success, setSuccess] = useState<boolean | undefined>()\n\n  const addToken = useCallback(() => {\n    if (library && library.provider.isMetaMask && library.provider.request && token) {\n      library.provider\n        .request({\n          method: 'wallet_watchAsset',\n          params: {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n            //@ts-ignore // need this for incorrect ethers provider type\n            type: 'ERC20',\n            options: {\n              address: token.address,\n              symbol: token.symbol,\n              decimals: token.decimals,\n              image: getTokenLogoURL(token.address)\n            }\n          }\n        })\n        .then(success => {\n          setSuccess(success)\n        })\n        .catch(() => setSuccess(false))\n    } else {\n      setSuccess(false)\n    }\n  }, [library, token])\n\n  return { addToken, success }\n}\n"]},"metadata":{},"sourceType":"module"}